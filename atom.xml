<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>迷失的羊羔</title>
  
  <subtitle>Aaron blog</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-01-28T15:41:24.775Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>恩光</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue生命周期</title>
    <link href="http://example.com/2023/01/28/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://example.com/2023/01/28/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2023-01-28T15:40:18.000Z</published>
    <updated>2023-01-28T15:41:24.775Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue的生命周期，就像人的的一生一样，人呢，就是在不同的阶段做该做的事。vue也是一样，vue就是在不同的时间点，调用不同的函数，这个函数也可以叫做是vue生命周期钩子</span><br></pre></td></tr></table></figure><h4 id="1，Vue的生命周期解析图"><a href="#1，Vue的生命周期解析图" class="headerlink" title="1，Vue的生命周期解析图"></a>1，Vue的生命周期解析图</h4><p>&#96;&#96;<img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202301281437558.png"></p><h4 id="2，挂载流程"><a href="#2，挂载流程" class="headerlink" title="2，挂载流程"></a>2，挂载流程</h4>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new Vue() —&gt; beforecreate —&gt; created —&gt; beforemount —&gt; mounted(挂在完成)</span><br></pre></td></tr></table></figure><ul><li>图解上图所示</li></ul><h4 id="3，更新流程"><a href="#3，更新流程" class="headerlink" title="3，更新流程"></a>3，更新流程</h4><ul><li><p>当挂载完成的数据发生更新时候….</p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202301282324405.png" alt="image-20230128232422195"></p></li></ul><h4 id="4，销毁挂载"><a href="#4，销毁挂载" class="headerlink" title="4，销毁挂载"></a>4，销毁挂载</h4><ul><li>当数据挂载完成吗，且数据已经更新，然后销毁挂载….</li></ul><p>​        <img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202301282327930.png" alt="image-20230128232722246"></p><h4 id="5，vue生命周期总结"><a href="#5，vue生命周期总结" class="headerlink" title="5，vue生命周期总结"></a>5，vue生命周期总结</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">常用的生命周期钩子：</span><br><span class="line">1.mounted: 发送ajax请求、启动定时器、绑定自定义事件、订阅消息等【初始化操作】。</span><br><span class="line">    2.beforeDestroy: 清除定时器、解绑自定义事件、取消订阅消息等【收尾工作】。</span><br><span class="line"></span><br><span class="line">关于销毁Vue实例</span><br><span class="line">1.销毁后借助Vue开发者工具看不到任何信息。</span><br><span class="line">2.销毁后自定义事件会失效，但原生DOM事件依然有效。</span><br><span class="line">3.一般不会在beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了。</span><br></pre></td></tr></table></figure><ul><li><p>代码示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>引出生命周期<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;opacity&#125;&quot;</span>&gt;</span>欢迎学习Vue<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;opacity = 1&quot;</span>&gt;</span>透明度设置为1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;stop&quot;</span>&gt;</span>点我停止变换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">opacity</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">stop</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.$destroy()</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//Vue完成模板的解析并把初始的真实DOM元素放入页面后（挂载完毕）调用mounted</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mounted&#x27;</span>,<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setInterval&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">opacity</span> -= <span class="number">0.01</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">opacity</span> &lt;= <span class="number">0</span>) <span class="variable language_">this</span>.<span class="property">opacity</span> = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;,<span class="number">16</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 清楚定时器</span></span></span><br><span class="line"><span class="language-javascript"><span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;vm即将销毁&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Vue生命周期&quot;&gt;&lt;a href=&quot;#Vue生命周期&quot; class=&quot;headerlink&quot; title=&quot;Vue生命周期&quot;&gt;&lt;/a&gt;Vue生命周期&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;</summary>
      
    
    
    
    <category term="Vue重点汇总" scheme="http://example.com/categories/Vue%E9%87%8D%E7%82%B9%E6%B1%87%E6%80%BB/"/>
    
    
    <category term="生命周期钩子" scheme="http://example.com/tags/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>列表渲染</title>
    <link href="http://example.com/2023/01/08/%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/"/>
    <id>http://example.com/2023/01/08/%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/</id>
    <published>2023-01-08T14:09:18.000Z</published>
    <updated>2023-01-28T15:39:54.528Z</updated>
    
    <content type="html"><![CDATA[<h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><ul><li><p>v-for</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1,用于展示列表数据</span><br><span class="line">2,可以遍历数组，对象，字符串，指定次数 【后两种用的很少】</span><br></pre></td></tr></table></figure></li></ul><h4 id="1，key的作用与原理【面试题】"><a href="#1，key的作用与原理【面试题】" class="headerlink" title="1，key的作用与原理【面试题】"></a>1，key的作用与原理【面试题】</h4><ul><li><p>虚拟DOM中key的作用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key是虚拟DOM对象唯一的标识。当数据发生改变时候，vue会根据【新数据】生成【新的虚拟DOM】，随后vue进行【新虚拟DOM】和【旧虚拟DOM】的Diff运算比较</span><br></pre></td></tr></table></figure></li><li><p>比较规则</p><ul><li><p>【旧虚拟DOM】中找到了【新虚拟DOM】相同的key</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a:若虚拟DOM中内容没有变，直接使用之前的真实DOM</span><br><span class="line">b:若虚拟DOM中内容分变了.那么就会生成新的真实DOM，随后替换页面中之前的真实DOM</span><br></pre></td></tr></table></figure></li><li><p>旧虚拟DOM中未找到与新虚拟DOM中相同的key</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">直接创建新的真实DOM，随后渲染在页面中</span><br></pre></td></tr></table></figure></li></ul></li><li><p>key的两种标识下的diff运算</p><ul><li><p>索引号作为key</p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202301282339057.jpg"></p></li><li><p>id唯一标识作为key</p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202301282339995.jpg"></p></li></ul></li><li><p>用index作为key可能引发的问题</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1,如果对数据进行：逆序添加，逆序删除，等破坏顺序操作：会场神没有必要的真实DOM的更新——导致渲染页面效率降低</span><br><span class="line">2,如果结构中还包括输入类的DOM【input等】：会产生错误的DOM更新，导致页面有问题。【这个问题，在索引号作为key那张图体现出来了】</span><br></pre></td></tr></table></figure></li></ul><h4 id="2，列表过滤"><a href="#2，列表过滤" class="headerlink" title="2，列表过滤"></a>2，列表过滤</h4><ul><li><p>回顾两个方法</p><ul><li><p><strong>Array.prototype.indexOf()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//indexOf() 方法返回在数组中可以找到给定元素的第一个索引，如果不存在，则返回 -1。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> beasts = [<span class="string">&#x27;ant&#x27;</span>, <span class="string">&#x27;bison&#x27;</span>, <span class="string">&#x27;camel&#x27;</span>, <span class="string">&#x27;duck&#x27;</span>, <span class="string">&#x27;bison&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(beasts.<span class="title function_">indexOf</span>(<span class="string">&#x27;bison&#x27;</span>));</span><br><span class="line"><span class="comment">// expected output: 1</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Array.prototype.filter</strong>()</p><p>【filter会给你过滤出一个全新的数组】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//filter() 方法创建给定数组一部分的浅拷贝，其包含通过所提供函数实现的测试的所有元素。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> words = [<span class="string">&#x27;spray&#x27;</span>, <span class="string">&#x27;limit&#x27;</span>, <span class="string">&#x27;elite&#x27;</span>, <span class="string">&#x27;exuberant&#x27;</span>, <span class="string">&#x27;destruction&#x27;</span>, <span class="string">&#x27;present&#x27;</span>];</span><br><span class="line"><span class="comment">// 筛选出长度大于6的字符串</span></span><br><span class="line"><span class="keyword">const</span> result = words.<span class="title function_">filter</span>(<span class="function"><span class="params">word</span> =&gt;</span> word.<span class="property">length</span> &gt; <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;exuberant&quot;, &quot;destruction&quot;, &quot;present&quot;]</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>核心原理【代码示例】</p><ul><li><p>下面代码会造成数据丢失</p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/%E5%88%97%E8%A1%A8%E8%BF%87%E6%BB%A41.jpg"></p></li><li><p>解决方案</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">利用立即属性immediate,因为用户一上来是没有输入任何东西，所以使用immediate，然后立即执行回调函数handler。这样就可以利用字符串里面都包含一个空字符这个关键点，解决问题</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/%E5%88%97%E8%A1%A8%E8%BF%87%E6%BB%A42.jpg"></p></li><li><p>示例代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入名字&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyWord&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) of filPerons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;p.sex&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用watch实现</span></span><br><span class="line"><span class="comment">//#region </span></span><br><span class="line"><span class="comment">/* new Vue(&#123;</span></span><br><span class="line"><span class="comment">el:&#x27;#root&#x27;,</span></span><br><span class="line"><span class="comment">data:&#123;</span></span><br><span class="line"><span class="comment">keyWord:&#x27;&#x27;,</span></span><br><span class="line"><span class="comment">persons:[</span></span><br><span class="line"><span class="comment">&#123;id:&#x27;001&#x27;,name:&#x27;马冬梅&#x27;,age:19,sex:&#x27;女&#x27;&#125;,</span></span><br><span class="line"><span class="comment">&#123;id:&#x27;002&#x27;,name:&#x27;周冬雨&#x27;,age:20,sex:&#x27;女&#x27;&#125;,</span></span><br><span class="line"><span class="comment">&#123;id:&#x27;003&#x27;,name:&#x27;周杰伦&#x27;,age:21,sex:&#x27;男&#x27;&#125;,</span></span><br><span class="line"><span class="comment">&#123;id:&#x27;004&#x27;,name:&#x27;温兆伦&#x27;,age:22,sex:&#x27;男&#x27;&#125;</span></span><br><span class="line"><span class="comment">],</span></span><br><span class="line"><span class="comment">filPerons:[]</span></span><br><span class="line"><span class="comment">&#125;,</span></span><br><span class="line"><span class="comment">watch:&#123;</span></span><br><span class="line"><span class="comment">keyWord:&#123;</span></span><br><span class="line"><span class="comment">immediate:true,</span></span><br><span class="line"><span class="comment">handler(val)&#123;</span></span><br><span class="line"><span class="comment">this.filPerons = this.persons.filter((p)=&gt;&#123;</span></span><br><span class="line"><span class="comment">return p.name.indexOf(val) !== -1</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;) */</span></span><br><span class="line"><span class="comment">//#endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用computed实现</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line"><span class="attr">keyWord</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="attr">persons</span>:[</span><br><span class="line">&#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;马冬梅&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周冬雨&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周杰伦&#x27;</span>,<span class="attr">age</span>:<span class="number">21</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="attr">id</span>:<span class="string">&#x27;004&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;温兆伦&#x27;</span>,<span class="attr">age</span>:<span class="number">22</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line"><span class="title function_">filPerons</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">persons</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">p</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">return</span> p.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="variable language_">this</span>.<span class="property">keyWord</span>) !== -<span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;) </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="3，列表排序"><a href="#3，列表排序" class="headerlink" title="3，列表排序"></a>3，列表排序</h4><ul><li><p>回顾Array.prototype.sort()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">sort</span>() 方法用原地算法对数组的元素进行排序，并返回数组</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line"><span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123; <span class="comment">/* … */</span> &#125; )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较函数</span></span><br><span class="line"><span class="title function_">sort</span>(compareFn)</span><br><span class="line"></span><br><span class="line"><span class="attr">a</span>:第一个用于比较的元素。</span><br><span class="line"></span><br><span class="line"><span class="attr">b</span>:第二个用于比较的元素。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>代码示例</p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/image-20230108215937247.png" alt="image-20230108215937247"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入名字&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyWord&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 2&quot;</span>&gt;</span>年龄升序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 1&quot;</span>&gt;</span>年龄降序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 0&quot;</span>&gt;</span>原顺序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) of filPerons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;p.sex&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">keyWord</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">sortType</span>:<span class="number">0</span>, <span class="comment">//0原顺序 1降序 2升序</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">persons</span>:[</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;马冬梅&#x27;</span>,<span class="attr">age</span>:<span class="number">30</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周冬雨&#x27;</span>,<span class="attr">age</span>:<span class="number">31</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周杰伦&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>:<span class="string">&#x27;004&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;温兆伦&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">]</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">filPerons</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> arr = <span class="variable language_">this</span>.<span class="property">persons</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">p</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> p.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="variable language_">this</span>.<span class="property">keyWord</span>) !== -<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//判断一下是否需要排序</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">sortType</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">p1,p2</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">sortType</span> === <span class="number">1</span> ? p2.<span class="property">age</span>-p1.<span class="property">age</span> : p1.<span class="property">age</span>-p2.<span class="property">age</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> arr</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;) </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;列表渲染&quot;&gt;&lt;a href=&quot;#列表渲染&quot; class=&quot;headerlink&quot; title=&quot;列表渲染&quot;&gt;&lt;/a&gt;列表渲染&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;v-for&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    <category term="Vue重点汇总" scheme="http://example.com/categories/Vue%E9%87%8D%E7%82%B9%E6%B1%87%E6%80%BB/"/>
    
    
    <category term="v-for" scheme="http://example.com/tags/v-for/"/>
    
  </entry>
  
  <entry>
    <title>监视属性</title>
    <link href="http://example.com/2023/01/01/%E7%9B%91%E8%A7%86%E5%B1%9E%E6%80%A7/"/>
    <id>http://example.com/2023/01/01/%E7%9B%91%E8%A7%86%E5%B1%9E%E6%80%A7/</id>
    <published>2023-01-01T07:50:23.000Z</published>
    <updated>2023-01-01T08:45:20.791Z</updated>
    
    <content type="html"><![CDATA[<h1 id="监视属性"><a href="#监视属性" class="headerlink" title="监视属性"></a>监视属性</h1><h4 id="1，监视属性用法"><a href="#1，监视属性用法" class="headerlink" title="1，监视属性用法"></a>1，监视属性用法</h4><ul><li><p>第一种：new Vue()中配置watch</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">isHot</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">info</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&quot;炎热&quot;</span> : <span class="string">&quot;凉爽&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">changeWeather</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">isHot</span> = !<span class="variable language_">this</span>.<span class="property">isHot</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">isHot</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">immediate</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 处理函数</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;监听isHot：&quot;</span>, <span class="string">&quot;newValue=&quot;</span> + newValue, <span class="string">&quot;oldValue=&quot;</span> + oldValue);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>第二种：使用 vm.$watch()监视</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">isHot</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">info</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&quot;炎热&quot;</span> : <span class="string">&quot;凉爽&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">changeWeather</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">isHot</span> = !<span class="variable language_">this</span>.<span class="property">isHot</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        vm.$watch(<span class="string">&#x27;isHot&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">immediate</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 处理函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;监听isHot：&quot;</span>, <span class="string">&quot;newValue=&quot;</span> + newValue, <span class="string">&quot;oldValue=&quot;</span> + oldValue);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2，深度监视"><a href="#2，深度监视" class="headerlink" title="2，深度监视"></a>2，深度监视</h4><ul><li>监视多级结构下属性的变化</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>数字的变化&#123;&#123;number.a&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeNumber&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">number</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="attr">a</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="attr">b</span>: <span class="number">2</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">changeNumber</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">this</span>.<span class="property">number</span>.<span class="property">a</span>++;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">watch</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 多级结构的监视</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 第一种</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="string">&#x27;number.a&#x27;</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">immdiate</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a的监视过程&#x27;</span>, newValue, oldValue)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">//第二种;deep开启深度监视，当number对象的任一属性发生变化，Vue也能侦听到，并执行回调handler。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">number</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">deep</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a的监视过程&#x27;</span>, newValue, oldValue)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>【控制台输出】</p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/image-20230101153352235.png" alt="image-20230101153352235"></p><h4 id="3，计算属性和监视属性"><a href="#3，计算属性和监视属性" class="headerlink" title="3，计算属性和监视属性"></a>3，计算属性和监视属性</h4><h5 id="1，computed和watch对比"><a href="#1，computed和watch对比" class="headerlink" title="1，computed和watch对比"></a>1，computed和watch对比</h5><ul><li>computed能完成的工作watch都可以</li><li>但是watch能完成的computed不一定可以，例如watch可以进行异步操作</li></ul><h5 id="2，两个小原则"><a href="#2，两个小原则" class="headerlink" title="2，两个小原则"></a>2，两个小原则</h5><ul><li><p>所有被我Vue管理的函数都要写成普通函数，不要写箭头函数，因为箭头函数会改变this的指向，如果这个函数是箭头函数，那么它的this指向就不是Vue实例了</p></li><li><p>所有不被Vue管理的函数【定时器函数，ajax回调函数等】都要写箭头函数，因为这样它们的this指向才是Vue实例，那么Vue实例才可以操作它</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里定时器使用箭头函数之后，因为箭头函数没有this对象，所以此时this指向的是vm,这样所有的数据都会在vm这个vue实例对象的管辖之内</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;监视属性&quot;&gt;&lt;a href=&quot;#监视属性&quot; class=&quot;headerlink&quot; title=&quot;监视属性&quot;&gt;&lt;/a&gt;监视属性&lt;/h1&gt;&lt;h4 id=&quot;1，监视属性用法&quot;&gt;&lt;a href=&quot;#1，监视属性用法&quot; class=&quot;headerlink&quot; title=&quot;1</summary>
      
    
    
    
    <category term="Vue重点汇总" scheme="http://example.com/categories/Vue%E9%87%8D%E7%82%B9%E6%B1%87%E6%80%BB/"/>
    
    
    <category term="watch" scheme="http://example.com/tags/watch/"/>
    
  </entry>
  
  <entry>
    <title>计算属性</title>
    <link href="http://example.com/2022/12/31/%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/12/31/%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2022-12-31T10:17:09.000Z</published>
    <updated>2023-01-01T08:44:58.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算属性的使用"><a href="#计算属性的使用" class="headerlink" title="计算属性的使用"></a>计算属性的使用</h1><ul><li>所谓计算属性：将属性计算加工之后，成为一个属性</li></ul><h4 id="1，计算属性使用"><a href="#1，计算属性使用" class="headerlink" title="1，计算属性使用"></a>1，计算属性使用</h4><ul><li><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">姓 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">v-model</span>=<span class="string">&#x27;firstName&#x27;</span>&gt;</span></span><br><span class="line">名 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">v-model</span>=<span class="string">&#x27;lastName&#x27;</span>&gt;</span></span><br><span class="line">全名 <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>script</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span></span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">firstName</span>:<span class="string">&#x27;张&#x27;</span>，</span><br><span class="line">        <span class="attr">lastName</span>:<span class="string">&#x27;三&#x27;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">       &#125;</span><br><span class="line">        <span class="attr">computed</span>:&#123;</span><br><span class="line">            <span class="attr">fullName</span>:&#123;</span><br><span class="line">                <span class="comment">//当有人读取fullName时，get就会被调用，且返回值作为我们fullName的值       </span></span><br><span class="line">                <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">                   <span class="keyword">return</span> firstName + <span class="string">&#x27;-&#x27;</span> + lastName</span><br><span class="line">                &#125;       </span><br><span class="line">            &#125;           </span><br><span class="line">        &#125;               </span><br><span class="line">                       </span><br><span class="line">    &#125;)</span><br><span class="line"> &lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-其他"><a href="#2-其他" class="headerlink" title="2,其他"></a>2,其他</h4><ul><li>计算属性的底层原理：使用的是object.defineProprety()方法</li><li>get函数什么时候执行<ul><li>第一次获取时会执行</li><li>当依赖的 数据发生变化时候会再次执行</li></ul></li><li>备注<ul><li>计算属性最终会出现在vm身上</li><li>如果计算属性要被修改，那必须写set函数去响应修改。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;计算属性的使用&quot;&gt;&lt;a href=&quot;#计算属性的使用&quot; class=&quot;headerlink&quot; title=&quot;计算属性的使用&quot;&gt;&lt;/a&gt;计算属性的使用&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;所谓计算属性：将属性计算加工之后，成为一个属性&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;1</summary>
      
    
    
    
    <category term="Vue重点汇总" scheme="http://example.com/categories/Vue%E9%87%8D%E7%82%B9%E6%B1%87%E6%80%BB/"/>
    
    
    <category term="computed" scheme="http://example.com/tags/computed/"/>
    
  </entry>
  
  <entry>
    <title>数据代理的使用</title>
    <link href="http://example.com/2022/12/31/%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/"/>
    <id>http://example.com/2022/12/31/%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/</id>
    <published>2022-12-31T08:37:09.000Z</published>
    <updated>2023-01-01T08:45:48.026Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h1><h3 id="1，Object-defineProperty"><a href="#1，Object-defineProperty" class="headerlink" title="1，Object.defineProperty()"></a>1，Object.defineProperty()</h3><p>在理解数据代理之前，我们先回顾一下这个方法的使用</p><h4 id="1，定义"><a href="#1，定义" class="headerlink" title="1，定义"></a>1，定义</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</span><br></pre></td></tr></table></figure><h4 id="2，语法"><a href="#2，语法" class="headerlink" title="2，语法"></a>2，语法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Object.defineProperty(obj, prop, descriptor)</span><br><span class="line"></span><br><span class="line">obj：要操作的对象</span><br><span class="line">prop：要操作这个对象上的哪个属性</span><br><span class="line">descriptor:要定义或修改的属性描述符。</span><br></pre></td></tr></table></figure><h4 id="3，基本使用"><a href="#3，基本使用" class="headerlink" title="3，基本使用"></a>3，基本使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="keyword">let</span> parson = &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">            <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">     <span class="comment">//下面是这个方法最基本的四个配置项，不过它还有其他配置项      </span></span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(parson, <span class="string">&#x27;age&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">value</span>: <span class="number">18</span>,</span><br><span class="line">            <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="comment">//控制属性是否可以枚举，默认值是false</span></span><br><span class="line">            <span class="attr">writable</span>:<span class="literal">true</span>,  <span class="comment">//控制属性是否可以被修改，默认值是false</span></span><br><span class="line">            <span class="attr">configurable</span>:<span class="literal">true</span>, <span class="comment">//控制属性是否可以被删除，默认值是false</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//    keys这个方法：将对象中的属性名枚举成一个数组。</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(parson))</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="4，高级使用"><a href="#4，高级使用" class="headerlink" title="4，高级使用"></a>4，高级使用</h4><h5 id="getter使用"><a href="#getter使用" class="headerlink" title="getter使用"></a>getter使用</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="keyword">let</span> number = <span class="number">18</span></span><br><span class="line">        <span class="keyword">let</span> parson = &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">            <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(parson, <span class="string">&#x27;age&#x27;</span>, &#123;</span><br><span class="line">            <span class="comment">// 当有人读取parson里面的 age属性，get函数（getter）就会被调用，且返回值是age的值</span></span><br><span class="line">            <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> number;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(parson)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>【控制台输出】</p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/image-20221231111331515.png" alt="image-20221231111331515"></p><h5 id="setter使用"><a href="#setter使用" class="headerlink" title="setter使用"></a>setter使用</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="keyword">let</span> number = <span class="number">18</span></span><br><span class="line">        <span class="keyword">let</span> parson = &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">            <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(parson, <span class="string">&#x27;age&#x27;</span>, &#123;</span><br><span class="line">            <span class="comment">// 当有人读取parson里面的 age属性，get函数（getter）就会被调用，且返回值是age的值</span></span><br><span class="line">            <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get函数被调用&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> number;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 当有人修改了parson里面的age属性，set函数(setter)就会被调用，且会受到修改的具体值</span></span><br><span class="line">            <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set函数被调用&#x27;</span>)</span><br><span class="line">                number = value</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(parson)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>【控制台输出】<img src="https://raw.githubusercontent.com/enguang0207/images/main/test/image-20221231112159329.png" alt="image-20221231112159329"></p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>综上所述，可见Object.defineProperty（）充当了中介的角色，将两个毫无关系的对象联系在一起，然后利用这个方法，对两对象进行操作。</p><h3 id="2，数据代理"><a href="#2，数据代理" class="headerlink" title="2，数据代理"></a>2，数据代理</h3><ul><li><p>通过一个对象对另一个对象的属性进行操作【读&#x2F;写】</p></li><li><p>一个最简单的数据代理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  </span><br><span class="line">       <span class="keyword">let</span> obj = &#123; <span class="attr">x</span>: <span class="number">100</span> &#125;;</span><br><span class="line">       <span class="keyword">let</span> obj1 = &#123; <span class="attr">y</span>: <span class="number">200</span> &#125;;</span><br><span class="line">       </span><br><span class="line">      <span class="comment">//利用数据代理，可以用obj1操作obj中的x</span></span><br><span class="line">       <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj1, <span class="string">&quot;x&quot;</span>, &#123;</span><br><span class="line">           <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">               <span class="keyword">return</span> obj.<span class="property">x</span>;</span><br><span class="line">           &#125;,</span><br><span class="line">  </span><br><span class="line">           <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span><br><span class="line">               obj.<span class="property">x</span> = value;</span><br><span class="line">  </span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">  </span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(obj1)</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>【控制台输出】</p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/%E6%8E%A7%E5%88%B61.jpg"></p></li></ul><h3 id="3-vue中的数据代理"><a href="#3-vue中的数据代理" class="headerlink" title="3,vue中的数据代理"></a>3,vue中的数据代理</h3><ul><li>Vue中的数据代理，也就是为了简化代码，让代码写起来更加的方便快捷</li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%861.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据代理&quot;&gt;&lt;a href=&quot;#数据代理&quot; class=&quot;headerlink&quot; title=&quot;数据代理&quot;&gt;&lt;/a&gt;数据代理&lt;/h1&gt;&lt;h3 id=&quot;1，Object-defineProperty&quot;&gt;&lt;a href=&quot;#1，Object-definePropert</summary>
      
    
    
    
    <category term="Vue重点汇总" scheme="http://example.com/categories/Vue%E9%87%8D%E7%82%B9%E6%B1%87%E6%80%BB/"/>
    
    
    <category term="数据代理" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>hexo搭建博客--未生成index.html文件</title>
    <link href="http://example.com/2022/12/21/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2-%E6%9C%AA%E7%94%9F%E6%88%90index-html%E6%96%87%E4%BB%B6/"/>
    <id>http://example.com/2022/12/21/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2-%E6%9C%AA%E7%94%9F%E6%88%90index-html%E6%96%87%E4%BB%B6/</id>
    <published>2022-12-21T13:51:09.000Z</published>
    <updated>2022-12-21T14:16:12.561Z</updated>
    
    <content type="html"><![CDATA[<ul><li><strong>问题</strong></li></ul>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo搭建blog部署到GitHub，然后打开自己的blog，发现出现404，页面丢失。</span><br></pre></td></tr></table></figure><ul><li><p><strong>原因</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">仔细一下GitHub的blog仓库中没有index.html文件，也就是在搭建hexo时候生成的public文件夹中没有index.html文件，所以导致在部署远端时也就不存在index.html文件。</span><br></pre></td></tr></table></figure></li><li><p><strong>解决问题：</strong></p><p>【出现上述原因是因为我们不小心把_posts文件夹给删除掉】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">&quot;我的blog&quot;</span></span><br></pre></td></tr></table></figure><ul><li>执行这个命令，它会自动生成一个_posts文件夹，然后文件夹里面有一个“我的blog”的文章</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  <span class="comment">//清除缓存文件 db.json 和已生成的静态文件 public</span></span><br><span class="line">hexo g   <span class="comment">//生成网站静态文件到默认设置的 public 文件夹</span></span><br><span class="line">hexo d   <span class="comment">//自动生成网站静态文件，并部署到设定的仓库。</span></span><br></pre></td></tr></table></figure><ul><li>依次执行hexo的三连环，将文件部署到远端仓库。【如果一次不成，多执行几次】</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;问题&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
  &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>node的基本使用</title>
    <link href="http://example.com/2022/11/08/node.js%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/11/08/node.js%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2022-11-08T08:10:32.000Z</published>
    <updated>2023-02-16T09:11:05.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h1><h2 id="一，node-js和内置模块"><a href="#一，node-js和内置模块" class="headerlink" title="一，node.js和内置模块"></a>一，node.js和内置模块</h2><h3 id="1，初识node-js"><a href="#1，初识node-js" class="headerlink" title="1，初识node.js"></a>1，初识node.js</h3><h4 id="1-浏览器中的JavaScript运行环境"><a href="#1-浏览器中的JavaScript运行环境" class="headerlink" title="1,浏览器中的JavaScript运行环境"></a>1,浏览器中的JavaScript运行环境</h4><p>  <img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651246.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651248.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651249.jpg" alt="a"></p><h4 id="2-javascript能否做后端开发"><a href="#2-javascript能否做后端开发" class="headerlink" title="2,javascript能否做后端开发"></a>2,javascript能否做后端开发</h4><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651250.jpg"></p><h4 id="3-node-js简介"><a href="#3-node-js简介" class="headerlink" title="3,node.js简介"></a>3,node.js简介</h4><h5 id="1，什么是node-js"><a href="#1，什么是node-js" class="headerlink" title="1，什么是node.js"></a>1，什么是node.js</h5><ul><li>是一个基于Chrome v8 引擎的JavaScript运行环境</li></ul><h5 id="2-node-js中的JavaScript运行环境"><a href="#2-node-js中的JavaScript运行环境" class="headerlink" title="2,node.js中的JavaScript运行环境"></a>2,node.js中的JavaScript运行环境</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651251.jpg"></p><ul><li>浏览器是js前端运行环境</li><li>node.js是js后端运行环境</li><li>node.js中无法调用浏览器内置的API</li></ul><h5 id="3-node-js做啥"><a href="#3-node-js做啥" class="headerlink" title="3,node.js做啥"></a>3,node.js做啥</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651252.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651253.jpg"></p><h4 id="4-node-js环境"><a href="#4-node-js环境" class="headerlink" title="4,node.js环境"></a>4,node.js环境</h4><h5 id="1，终端"><a href="#1，终端" class="headerlink" title="1，终端"></a>1，终端</h5><ul><li>terminal。用于实现人机交互的一种方式</li><li>每个系统都有内置终端。可以运行一些终端命令</li></ul><h5 id="2，node-js环境中执行JavaScript代码"><a href="#2，node-js环境中执行JavaScript代码" class="headerlink" title="2，node.js环境中执行JavaScript代码"></a>2，node.js环境中执行JavaScript代码</h5><ul><li><p>1，打开终端</p></li><li><p>2，输入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node js代码路径</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651254.jpg"></p><h4 id="3，终端中的快捷键"><a href="#3，终端中的快捷键" class="headerlink" title="3，终端中的快捷键"></a>3，终端中的快捷键</h4><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651255.jpg"></p><h3 id="2，fs文件系统模块"><a href="#2，fs文件系统模块" class="headerlink" title="2，fs文件系统模块"></a>2，fs文件系统模块</h3><p>####1，什么是fs</p><ul><li><p>fs模块是node.js环境中的内置模块。用来操作文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(),读取文件中的内容</span><br><span class="line">fs.writeFile(),用于指定的文件写入的内容</span><br></pre></td></tr></table></figure></li><li><p>在JavaScript代码中需要引入fs模块</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-读取文件中内容"><a href="#2-读取文件中内容" class="headerlink" title="2,读取文件中内容"></a>2,读取文件中内容</h4><ul><li><p><strong>readFile()语法格式</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(path,[option],callback)</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651256.jpg"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs);</span><br><span class="line">fs.readFile(&#x27;1.md&#x27;,(err,data)=&gt;&#123;</span><br><span class="line">  if(err)  return console.log(err.message);</span><br><span class="line">  console.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651257.jpg"></p><h4 id="3-指定文件中写入内容"><a href="#3-指定文件中写入内容" class="headerlink" title="3,指定文件中写入内容"></a>3,指定文件中写入内容</h4><ul><li><p><strong>fs.writeFile()语法格式</strong></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651258.JPG"></p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 引入fs模块</span><br><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line">const &#123; stringify &#125; = require(&#x27;querystring&#x27;);</span><br><span class="line"></span><br><span class="line">// 给这个文件写入这样的内容。这些内容会覆盖之前文件内容。</span><br><span class="line">fs.writeFile(&#x27;2.md&#x27;, &#x27;追逐祂的脚步，永不动摇&#x27;, (err, data) =&gt; &#123;</span><br><span class="line">    if (err) return console.log(err);</span><br><span class="line">    console.log(fs.readFile(&#x27;2.md&#x27;, (err, data) =&gt; &#123;</span><br><span class="line">        if (err) return console.log(err.message);</span><br><span class="line">        //转为字符串</span><br><span class="line">        console.log(data.toString())</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651259.jpg"></p><p>【案例】：整理学生成绩</p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651260.jpg"></p><ul><li><h1 id="String-prototype-split"><a href="#String-prototype-split" class="headerlink" title="String.prototype.split()"></a>String.prototype.split()</h1><p>使用指定的分隔符字符串将一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String"><code>String</code></a>对象分割成子字符串数组，以一个指定的分割字串来决定每个拆分的位置</p></li><li><h1 id="String-prototype-replace"><a href="#String-prototype-replace" class="headerlink" title="String.prototype.replace()"></a>String.prototype.replace()</h1><p>方法返回一个由替换值（<code>replacement</code>）替换部分或所有的模式（<code>pattern</code>）匹配项后的新字符串。</p></li><li><h1 id="Array-prototype-join"><a href="#Array-prototype-join" class="headerlink" title="Array.prototype.join()"></a>Array.prototype.join()</h1><p> 方法将一个数组（或一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Indexed_collections#%E4%BD%BF%E7%94%A8%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1_array-like_objects">类数组对象</a>）的所有元素连接成一个字符串并返回这个字符串，用逗号或指定的分隔符字符串分隔</p></li></ul><h4 id="4，fs模块-路径动态拼接问题"><a href="#4，fs模块-路径动态拼接问题" class="headerlink" title="4，fs模块- 路径动态拼接问题"></a>4，fs模块- 路径动态拼接问题</h4><ul><li>出现路径拼接错误的问题，是因为提供了 .&#x2F;  or ..&#x2F;   开头的相对路径</li><li>解决：可以提供一个绝对路径。（完整的文件存放路径）</li></ul><h3 id="3，path-路径模块"><a href="#3，path-路径模块" class="headerlink" title="3，path 路径模块"></a>3，path 路径模块</h3><h4 id="1，path模块？？"><a href="#1，path模块？？" class="headerlink" title="1，path模块？？"></a>1，path模块？？</h4><ul><li>用来处理路径的模块。</li><li>方法：<ul><li>path.join()：将多个路径片段拼接一个完整的路径字符串</li><li>path.basename()：用来从路径字符串中。将文件名解析出来</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651261.jpg"></p><h4 id="2-路径拼接"><a href="#2-路径拼接" class="headerlink" title="2,路径拼接"></a>2,路径拼接</h4><ul><li><p><strong>path.join([…path])</strong></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651261.jpg"></p></li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651262.jpg"></p><ul><li><strong>以后遇到路径拼接尽量用join（）方法，别用+</strong></li></ul><h4 id="3，获取路径中的文件名"><a href="#3，获取路径中的文件名" class="headerlink" title="3，获取路径中的文件名"></a>3，获取路径中的文件名</h4><ul><li><p><strong>path.basename(path,[…ext])</strong></p><ul><li>可以获取路径中的最后一部分，用这个方法可以获取文件名</li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651263.jpg"></p></li></ul><h4 id="4-获取路径中的文件扩展名"><a href="#4-获取路径中的文件扩展名" class="headerlink" title="4,获取路径中的文件扩展名"></a>4,获取路径中的文件扩展名</h4><ul><li><strong>path.extname()</strong></li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651264.jpg"></p><p>【案例】时钟案例</p><p><img src="/!%5B%5D(https:/raw.githubusercontent.com/enguang0207/images/main/test/202302161651265.jpg"></p><p><img src="/!%5B%5D(https:/raw.githubusercontent.com/enguang0207/images/main/test/202302161651266.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651267.jpg"></p><h3 id="4-http模块"><a href="#4-http模块" class="headerlink" title="4,http模块"></a>4,http模块</h3><h4 id="1-什么是http模块"><a href="#1-什么是http模块" class="headerlink" title="1,什么是http模块"></a>1,什么是http模块</h4><ul><li>用于创建web服务器的模块。通过http模块提供的http。createServer()方法。就可以将一天电脑变为一个web服务器。</li></ul><h4 id="2，http模块作用"><a href="#2，http模块作用" class="headerlink" title="2，http模块作用"></a>2，http模块作用</h4><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651268.jpg"></p><h4 id="3-服务器相关的概念"><a href="#3-服务器相关的概念" class="headerlink" title="3.服务器相关的概念"></a>3.服务器相关的概念</h4><h5 id="1-ip地址"><a href="#1-ip地址" class="headerlink" title="1,ip地址"></a>1,ip地址</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651269.jpg"></p><ul><li><strong>ping  域名</strong>  ：   查看这个网址的IP</li></ul><h5 id="2-域名和域名服务区"><a href="#2-域名和域名服务区" class="headerlink" title="2,域名和域名服务区"></a>2,域名和域名服务区</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651270.jpg"></p><h5 id="2-端口号"><a href="#2-端口号" class="headerlink" title="2,端口号"></a>2,端口号</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651271.jpg"></p><ul><li>实际应用中，URL里面80 端口可以省略</li><li>每个端口号指定一个web服务</li></ul><h4 id="4，创建基本web服务器"><a href="#4，创建基本web服务器" class="headerlink" title="4，创建基本web服务器"></a>4，创建基本web服务器</h4><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651272.jpg"></p><h5 id="1-基本步骤"><a href="#1-基本步骤" class="headerlink" title="1,基本步骤"></a>1,基本步骤</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 1，引入http模块</span><br><span class="line">const http = require(&#x27;http&#x27;);</span><br><span class="line"></span><br><span class="line">// 2,创建web服务器实例‘</span><br><span class="line">const server = http.createServer();</span><br><span class="line"></span><br><span class="line">// 3,绑定request请求，监听客户端事件</span><br><span class="line">server.on(&#x27;request&#x27;,(err,data)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;执行回调函数里面内容&#x27;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 4，启动服务器</span><br><span class="line">server.listen(&#x27;80&#x27;,()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;服务已经启动。80端口正在监听中.....&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="2-request请求对象"><a href="#2-request请求对象" class="headerlink" title="2 request请求对象"></a>2 request请求对象</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651273.jpg"></p><h5 id="3-response响应对象"><a href="#3-response响应对象" class="headerlink" title="3,response响应对象"></a>3,response响应对象</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651274.jpg"></p><h5 id="4，解决客户端乱码问题"><a href="#4，解决客户端乱码问题" class="headerlink" title="4，解决客户端乱码问题"></a>4，解决客户端乱码问题</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651275.jpg"></p><ul><li>res.serHeader()</li></ul><h5 id="5，根据不同的URL响应不同的HTML内容"><a href="#5，根据不同的URL响应不同的HTML内容" class="headerlink" title="5，根据不同的URL响应不同的HTML内容"></a>5，根据不同的URL响应不同的HTML内容</h5><h5 id="1，核心实现步骤"><a href="#1，核心实现步骤" class="headerlink" title="1，核心实现步骤"></a>1，核心实现步骤</h5><ul><li>获取请求的URL地址</li><li>设置默认的响应内容的为404 not found</li><li>判断用户请求的是否为 &#x2F; 或 &#x2F;index.html 首页</li><li>判断用户请求的是否为 &#x2F;about.html 关于页面</li><li>设置Content-Type 响应头。防止中文乱码</li><li>使用res.end()把内容响应给客户端</li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651276.jpg"></p><h5 id="2-实现clock时钟的web服务器"><a href="#2-实现clock时钟的web服务器" class="headerlink" title="2,实现clock时钟的web服务器"></a>2,实现clock时钟的web服务器</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651277.jpg"></p><ul><li>服务器的角色是一个字符串的搬运工</li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651278.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651279.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651281.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651282.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651283.jpg"></p><h2 id="二，模块化"><a href="#二，模块化" class="headerlink" title="二，模块化"></a>二，模块化</h2><h3 id="1，模块化基本概念"><a href="#1，模块化基本概念" class="headerlink" title="1，模块化基本概念"></a>1，模块化基本概念</h3><h4 id="1，什么是模块化"><a href="#1，什么是模块化" class="headerlink" title="1，什么是模块化"></a>1，什么是模块化</h4><ul><li><p>编程领域模块化：遵循固定的规则，将一个大文件拆分独立并互相依赖的多个小模块</p></li><li><p>模块化拆分好处：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1,代码复用性</span><br><span class="line">2，代码可维护性</span><br><span class="line">3，实现按需加载</span><br></pre></td></tr></table></figure></li></ul><h4 id="2，模块化规范"><a href="#2，模块化规范" class="headerlink" title="2，模块化规范"></a>2，模块化规范</h4><ul><li>就是对代码进行模块化的拆分与组合是，需要遵守的那些规则</li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651284.jpg"></p><h3 id="2-node-js中模块化"><a href="#2-node-js中模块化" class="headerlink" title="2,node.js中模块化"></a>2,node.js中模块化</h3><ul><li>内置模块</li><li>自定义模块</li><li>第三方模块:第三方模块需要下载</li></ul><h4 id="1，加载模块"><a href="#1，加载模块" class="headerlink" title="1，加载模块"></a>1，加载模块</h4><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651285.jpg"></p><ul><li>在使用require加载自定义模块期间。可以省略.js后缀名</li></ul><h4 id="2，node-js中的模块作用域"><a href="#2，node-js中的模块作用域" class="headerlink" title="2，node.js中的模块作用域"></a>2，node.js中的模块作用域</h4><h5 id="1，什么是模块作用域"><a href="#1，什么是模块作用域" class="headerlink" title="1，什么是模块作用域"></a>1，什么是模块作用域</h5><ul><li>模块作用域：只能在当前模块内被访问。类似函数作用域</li></ul><h5 id="2，模块作用域好处"><a href="#2，模块作用域好处" class="headerlink" title="2，模块作用域好处"></a>2，模块作用域好处</h5><ul><li><p>防止了全局变量污染的问题</p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651286.jpg"></p></li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651287.jpg"></p><h4 id="3-共享模块作用域中的成员"><a href="#3-共享模块作用域中的成员" class="headerlink" title="3,共享模块作用域中的成员"></a>3,共享模块作用域中的成员</h4><h5 id="1-module对象"><a href="#1-module对象" class="headerlink" title="1.module对象"></a>1.module对象</h5><ul><li>每个js自定义模块中，都有一个module对象。里面<strong>存储了和当前模块有关信息</strong></li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651288.jpg"></p><h5 id="2-module-exports对象"><a href="#2-module-exports对象" class="headerlink" title="2,module.exports对象"></a>2,module.exports对象</h5><ul><li><p>可以使用这个对象。将模块中的成员共享出去，相当于一个通道</p></li><li><p><strong>外界使用require（）方法导入自定义模块时，得到的就是module.exprots所指的对象</strong></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651289.jpg"></p></li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651290.jpg"></p><h5 id="3-共享成员注意点"><a href="#3-共享成员注意点" class="headerlink" title="3,共享成员注意点"></a>3,共享成员注意点</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651291.jpg"></p><h5 id="3-exports对象"><a href="#3-exports对象" class="headerlink" title="3.exports对象"></a>3.exports对象</h5><ul><li>为了简化module.exports.后来你node提供了exports对象。他们两指向同一个对象。<strong>exports始终指向module.exports所指的对象</strong></li></ul><h5 id="4，exports和module-exports使用误区"><a href="#4，exports和module-exports使用误区" class="headerlink" title="4，exports和module.exports使用误区"></a>4，exports和module.exports使用误区</h5><ul><li><p><strong>require()模块时，得到永远是module.exports指向的对象</strong></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651292.jpg"></p></li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651293.jpg"> </p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651294.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651295.jpg"></p><h5 id="5-node-js中的模块化规范"><a href="#5-node-js中的模块化规范" class="headerlink" title="5,node.js中的模块化规范"></a>5,node.js中的模块化规范</h5><ul><li>使用commonJS模块化规范。他规定了<strong>模块化的特性</strong>和<strong>各模块之间如何相互依赖</strong></li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651296.jpg"></p><h3 id="3-npm与包"><a href="#3-npm与包" class="headerlink" title="3 npm与包"></a>3 npm与包</h3><h4 id="1，包"><a href="#1，包" class="headerlink" title="1，包"></a>1，包</h4><ul><li>就是第三方模块</li><li>包来源：第三方开发出来的，包都是开源的。下载即用</li></ul><h5 id="1-为啥需要包"><a href="#1-为啥需要包" class="headerlink" title="1,为啥需要包"></a>1,为啥需要包</h5><ul><li>包是基于内置模块封装出来的。提供了更加高级，方便的API,可以极大提高开发效率</li></ul><h5 id="2，从哪下载包"><a href="#2，从哪下载包" class="headerlink" title="2，从哪下载包"></a>2，从哪下载包</h5><p> <img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651297.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651298.jpg"></p><h4 id="2-npm-体验"><a href="#2-npm-体验" class="headerlink" title="2,npm 体验"></a>2,npm 体验</h4><h5 id="1，格式化时间的高级做法"><a href="#1，格式化时间的高级做法" class="headerlink" title="1，格式化时间的高级做法"></a>1，格式化时间的高级做法</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651299.jpg"></p><h5 id="2-项目中安装包命令"><a href="#2-项目中安装包命令" class="headerlink" title="2,项目中安装包命令"></a>2,项目中安装包命令</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install  包名称</span><br><span class="line">npm i 包名称</span><br></pre></td></tr></table></figure><h5 id="3-初次装包多了那些文件"><a href="#3-初次装包多了那些文件" class="headerlink" title="3.初次装包多了那些文件"></a>3.初次装包多了那些文件</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651300.jpg"></p><h5 id="4-安装指定版本的的包"><a href="#4-安装指定版本的的包" class="headerlink" title="4,安装指定版本的的包"></a>4,安装指定版本的的包</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i moment@版本号</span><br></pre></td></tr></table></figure><h4 id="3，包管理配置文件"><a href="#3，包管理配置文件" class="headerlink" title="3，包管理配置文件"></a>3，包管理配置文件</h4><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651301.jpg"> </p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651302.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651303.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651304.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651305.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651305.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651306.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651307.jpg"></p><h4 id="4-解决下包慢的问题"><a href="#4-解决下包慢的问题" class="headerlink" title="4,解决下包慢的问题"></a>4,解决下包慢的问题</h4><h5 id="1-淘宝npm-镜像服务器"><a href="#1-淘宝npm-镜像服务器" class="headerlink" title="1.淘宝npm 镜像服务器"></a>1.淘宝npm 镜像服务器</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651308.jpg"></p><ul><li>镜像：是一种文件存储形式，一个磁盘上的数据在另一个磁盘上存在一个<strong>完全相同的副本。</strong></li></ul><h5 id="2-切换下包镜像源"><a href="#2-切换下包镜像源" class="headerlink" title="2.切换下包镜像源"></a>2.切换下包镜像源</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651309.jpg"></p><h5 id="3-nrm"><a href="#3-nrm" class="headerlink" title="3.nrm"></a>3.nrm</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651310.jpg"></p><h4 id="3-包的分类"><a href="#3-包的分类" class="headerlink" title="3.包的分类"></a>3.包的分类</h4><h5 id="1-项目包："><a href="#1-项目包：" class="headerlink" title="1,项目包："></a>1,项目包：</h5><p>安装在node_modules目录中的包</p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651311.jpg"></p><h5 id="2-全局包"><a href="#2-全局包" class="headerlink" title="2,全局包"></a>2,全局包</h5><ul><li>在执行npm install 命令时候后面添加 -g参数</li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651312.jpg"></p><h5 id="5-i5ting-toc"><a href="#5-i5ting-toc" class="headerlink" title="5,i5ting_toc"></a>5,i5ting_toc</h5><ul><li><p>这是一个可以将md文档转换为HTML页面工具</p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651313.jpg"></p></li></ul><h5 id="6，规范的包结构"><a href="#6，规范的包结构" class="headerlink" title="6，规范的包结构"></a>6，规范的包结构</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651314.jpg"></p><h3 id="4-模块的加载机制-了解"><a href="#4-模块的加载机制-了解" class="headerlink" title="4,模块的加载机制(了解)"></a>4,模块的加载机制(了解)</h3><ul><li><p>优先从缓冲中加载</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">模块在第一次加载后会被缓存。这也多次调用require（） 不会导致模块的代码被执行多次。模块都会优先从缓存中加载。</span><br></pre></td></tr></table></figure></li><li><p>内置模块的加载机制</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">内置模块是。node.js官方提供的模板，内置模块加载优先级最高。</span><br></pre></td></tr></table></figure></li><li><p>自定义模块加载机制</p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651315.jpg"></p></li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651316.jpg"></p><ul><li><p>第三方模块加载机制</p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651317.jpg"></p></li><li><p>目录作为模块</p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651318.jpg"></p></li></ul><h2 id="三-express"><a href="#三-express" class="headerlink" title="三 express"></a>三 express</h2><h3 id="一-初识express"><a href="#一-初识express" class="headerlink" title="(一)初识express"></a>(一)初识express</h3><h4 id="1，express简介"><a href="#1，express简介" class="headerlink" title="1，express简介"></a>1，express简介</h4><ul><li>express作用和node.js内置的http模块类似，<strong>专门用来创建web服务器的</strong></li><li>express本质是一个npm上的第三方包，<strong>提供快速创建web服务器</strong></li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651319.jpg"></p><h5 id="1-express-可以做什么"><a href="#1-express-可以做什么" class="headerlink" title="1,express 可以做什么"></a>1,express 可以做什么</h5><ul><li>web网站服务器：提供web网页资源的服务器</li><li>API接口服务器：</li></ul><h4 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2,基本使用"></a>2,基本使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i express</span><br></pre></td></tr></table></figure><h5 id="1-创建基本web服务器"><a href="#1-创建基本web服务器" class="headerlink" title="1,创建基本web服务器"></a>1,创建基本web服务器</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651320.jpg"></p><h5 id="2-监听GET请求"><a href="#2-监听GET请求" class="headerlink" title="2,监听GET请求"></a>2,监听GET请求</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651321.jpg"></p><h5 id="3-监听POST请求"><a href="#3-监听POST请求" class="headerlink" title="3,监听POST请求"></a>3,监听POST请求</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651322.jpg"></p><h5 id="4，将内容响应给客户端"><a href="#4，将内容响应给客户端" class="headerlink" title="4，将内容响应给客户端"></a>4，将内容响应给客户端</h5><ul><li>通过res.send()方法，可以将处理好的内容，发给客户端</li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651323.jpg"></p><h5 id="5-获取URL中携带的查询参数"><a href="#5-获取URL中携带的查询参数" class="headerlink" title="5,获取URL中携带的查询参数"></a>5,获取URL中携带的查询参数</h5><ul><li>req.qurey对象。可以访问客户端通过查询字符串的形式。发送服务器的参数</li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651324.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651325.jpg"></p><h5 id="6-获取URL的动态参数"><a href="#6-获取URL的动态参数" class="headerlink" title="6,获取URL的动态参数"></a>6,获取URL的动态参数</h5><ul><li>通过req.param对象。可以访问得到URL。通过匹配到的<strong>动态参数</strong>。</li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651326.jpg"></p><h4 id="3-托管静态资源"><a href="#3-托管静态资源" class="headerlink" title="3,托管静态资源"></a>3,托管静态资源</h4><h5 id="1，express-static"><a href="#1，express-static" class="headerlink" title="1，express.static"></a>1，express.static</h5><ul><li>通过这个，我们可以非常方便的<strong>创建一个静态资源服务器</strong>，例</li><li><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651327.jpg"></li><li>express在指定的<strong>静态目录中查找文件，并且对外提供资源的访问路径</strong>。因此存放静态文件的目录名不会出现在URL中</li></ul><h5 id="2-托管多个静态资源目录"><a href="#2-托管多个静态资源目录" class="headerlink" title="2 托管多个静态资源目录"></a>2 托管多个静态资源目录</h5><ul><li><strong>多次调用express.static()函数</strong></li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651328.jpg"></p><h5 id="3-挂载路径前缀"><a href="#3-挂载路径前缀" class="headerlink" title="3,挂载路径前缀"></a>3,挂载路径前缀</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651329.jpg"></p><ul><li>它的作用：如果想访问某个目录，<strong>我们就挂载路径前缀</strong>。好处是当<strong>我们想访问指定目录的文件就很方便</strong></li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651290.jpg"></p><h3 id="（二）express路由"><a href="#（二）express路由" class="headerlink" title="（二）express路由"></a>（二）express路由</h3><h4 id="1，路由概念"><a href="#1，路由概念" class="headerlink" title="1，路由概念"></a>1，路由概念</h4><h5 id="1，express中的路由"><a href="#1，express中的路由" class="headerlink" title="1，express中的路由"></a>1，express中的路由</h5><ul><li>指<strong>客户端的请求</strong>与<strong>服务器处理函数</strong>之间的<strong>映射关系</strong></li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651330.jpg"></p><ul><li>路由三部分组成：<strong>请求类型  请求的URL地址 处理函数</strong></li></ul><h5 id="2，路由匹配的过程"><a href="#2，路由匹配的过程" class="headerlink" title="2，路由匹配的过程"></a>2，路由匹配的过程</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651331.jpg"></p><h4 id="2-路由的使用"><a href="#2-路由的使用" class="headerlink" title="2 路由的使用"></a>2 路由的使用</h4><h5 id="1，简单用法"><a href="#1，简单用法" class="headerlink" title="1，简单用法"></a>1，简单用法</h5><ul><li><p>将路由挂载服务器上</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const express = require(&#x27;express);</span><br><span class="line"></span><br><span class="line">//创建web服务器</span><br><span class="line">const APP = express();</span><br><span class="line">//路由挂载,监听客户端的请求地址</span><br><span class="line">APP.get(&#x27;/&#x27;,(req,res)=&gt;&#123;</span><br><span class="line">  res.send(&#x27;hello&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">APP.post(&#x27;/&#x27;,(req,res)=&gt;&#123;</span><br><span class="line">  res.send(&#x27;hello&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">//启动web服务器</span><br><span class="line">APP.listen(&#x27;8000&#x27;,()=&gt;&#123;</span><br><span class="line">  console.log(服务器已经启动，端口监听中...http://127.0.0.1);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h5 id="2，模块化路由"><a href="#2，模块化路由" class="headerlink" title="2，模块化路由"></a>2，模块化路由</h5><ul><li><strong>为了方便管理</strong>，express<strong>不建议</strong>将路由直接挂载到APP上。<strong>推荐将路由抽离为单独的模块</strong></li><li>创建路由模块</li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651332.jpg"></p><ul><li>注册路由模块</li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651333.jpg"></p><h5 id="3，为路由模块添加前缀"><a href="#3，为路由模块添加前缀" class="headerlink" title="3，为路由模块添加前缀"></a>3，为路由模块添加前缀</h5><ul><li><p>类似托管静态资源，为静态资源统一挂载访问前缀一样</p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651290.jpg"></p></li></ul><h3 id="三-，express中间件"><a href="#三-，express中间件" class="headerlink" title="(三)，express中间件"></a>(三)，express中间件</h3><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651334.jpg"></p><h4 id="1-中间间概念"><a href="#1-中间间概念" class="headerlink" title="1,中间间概念"></a>1,中间间概念</h4><h5 id="1-express中间件调用流程"><a href="#1-express中间件调用流程" class="headerlink" title="1.express中间件调用流程"></a>1.express中间件调用流程</h5><ul><li><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651335.jpg"></li></ul><h5 id="2-express中间件的格式"><a href="#2-express中间件的格式" class="headerlink" title="2,express中间件的格式"></a>2,express中间件的格式</h5><ul><li>本质上是一个function处理函数。</li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651335.jpg"></p><h5 id="3-next-函数的作用"><a href="#3-next-函数的作用" class="headerlink" title="3,next 函数的作用"></a>3,next 函数的作用</h5><ul><li><strong>它是实现多个中间件连续调用的关键</strong>。表示<strong>将流转关系转交给下一个中间件或路由</strong></li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651337.jpg"></p><h4 id="2-中间件体验"><a href="#2-中间件体验" class="headerlink" title="2,中间件体验"></a>2,中间件体验</h4><h5 id="1-最简单中间件"><a href="#1-最简单中间件" class="headerlink" title="1,最简单中间件"></a>1,最简单中间件</h5><h5 id=""><a href="#" class="headerlink" title=""></a><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651338.jpg"></h5><h5 id="2，全局生效中间件"><a href="#2，全局生效中间件" class="headerlink" title="2，全局生效中间件"></a>2，全局生效中间件</h5><ul><li>客户端发起的<strong>任何请求</strong>，<strong>到达服务器都会出发中间件</strong>。叫做全局生效的中间件 </li><li>通过<strong>调用app.use(中间件函数)<strong>。可以定义一个</strong>全局生效</strong>的中间件</li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651339.jpg"></p><h5 id="3，定义全局中间件的简易形式"><a href="#3，定义全局中间件的简易形式" class="headerlink" title="3，定义全局中间件的简易形式"></a>3，定义全局中间件的简易形式</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651340.jpg"></p><h5 id="4-中间件的作用（实际）"><a href="#4-中间件的作用（实际）" class="headerlink" title="4,中间件的作用（实际）"></a>4,中间件的作用（实际）</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651341.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651342.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651343.jpg"></p><h5 id="5-定义多个中间件"><a href="#5-定义多个中间件" class="headerlink" title="5,定义多个中间件"></a>5,定义多个中间件</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651344.jpg"></p><h5 id="6，局部生效的中间件"><a href="#6，局部生效的中间件" class="headerlink" title="6，局部生效的中间件"></a>6，局部生效的中间件</h5><ul><li><strong>不适用app.use()定义的中间件</strong>，叫做局部生效的中间件</li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651345.jpg"></p><ul><li><p>可以定义多个局部中间件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在路由中。添加局部中间件就好</span><br><span class="line"></span><br><span class="line">添加方式：直接添加。和数组形式添加</span><br></pre></td></tr></table></figure></li></ul><h5 id="7-中间件的使用事项"><a href="#7-中间件的使用事项" class="headerlink" title="7.中间件的使用事项"></a>7.中间件的使用事项</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651346.jpg"></p><h4 id="3-中间件的分类"><a href="#3-中间件的分类" class="headerlink" title="3,中间件的分类"></a>3,中间件的分类</h4><h5 id="1，应用级别的中间件"><a href="#1，应用级别的中间件" class="headerlink" title="1，应用级别的中间件"></a>1，应用级别的中间件</h5><ul><li>通过**app.use()或者app.post()<strong>，或者</strong>app.get()**绑定到实例上的中间件，叫做应用级别中间件</li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651347.jpg"></p><h5 id="2-路由级别的中间件"><a href="#2-路由级别的中间件" class="headerlink" title="2,路由级别的中间件"></a>2,路由级别的中间件</h5><ul><li><p>绑定到express.Route()实例上的中间件。用法和应用级别中间件没有任何区别。</p></li><li><p><strong>应用级别中间件绑定在app实例。路由级别中间件绑定到router实例上面</strong></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651348.jpg"></p></li></ul><h5 id="3-错误级别中间件"><a href="#3-错误级别中间件" class="headerlink" title="3,错误级别中间件"></a>3,错误级别中间件</h5><ul><li><p>作用：专<strong>门用来捕获整个项目中发生的异常错误</strong>。防止项目异常崩溃的问题</p></li><li><p>格式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(err,req,res,next)=&gt;&#123;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651349.jpg"></p></li></ul><h5 id="4-express内置的中间件"><a href="#4-express内置的中间件" class="headerlink" title="4 express内置的中间件"></a>4 express内置的中间件</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651350.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651351.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651352.jpg"></p><ul><li><strong>如果没有任何解析表单数据的中间件。req.body默认返回unde</strong></li></ul><h5 id="5-第三方中间件"><a href="#5-第三方中间件" class="headerlink" title="5,第三方中间件"></a>5,第三方中间件</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651353.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651354.jpg"></p><h4 id="4-自定义中间件"><a href="#4-自定义中间件" class="headerlink" title="4,自定义中间件"></a>4,自定义中间件</h4><h5 id="1，需求描述与实现步骤"><a href="#1，需求描述与实现步骤" class="headerlink" title="1，需求描述与实现步骤"></a>1，需求描述与实现步骤</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651355.jpg"></p><h3 id="三-使用express写接口"><a href="#三-使用express写接口" class="headerlink" title="(三)使用express写接口"></a>(三)使用express写接口</h3><h4 id="1，创建基本服务器"><a href="#1，创建基本服务器" class="headerlink" title="1，创建基本服务器"></a>1，创建基本服务器</h4><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651356.jpg"></p><h4 id="2，创建API路由模块"><a href="#2，创建API路由模块" class="headerlink" title="2，创建API路由模块"></a>2，创建API路由模块</h4><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651357.jpg"></p><h4 id="3-编写GET接口"><a href="#3-编写GET接口" class="headerlink" title="3,编写GET接口"></a>3,编写GET接口</h4><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651358.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651359.jpg"></p><h4 id="4-编写post接口"><a href="#4-编写post接口" class="headerlink" title="4,编写post接口"></a>4,编写post接口</h4><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651360.jpg"></p><h4 id="5，CORS跨域资源共享"><a href="#5，CORS跨域资源共享" class="headerlink" title="5，CORS跨域资源共享"></a>5，CORS跨域资源共享</h4><h5 id="1，接口跨域问题"><a href="#1，接口跨域问题" class="headerlink" title="1，接口跨域问题"></a>1，接口跨域问题</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651361.jpg"></p><h5 id="2-使用cors中间件解决跨域"><a href="#2-使用cors中间件解决跨域" class="headerlink" title="2,使用cors中间件解决跨域"></a>2,使用cors中间件解决跨域</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651362.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651363.jpg"></p><h5 id="3-什么是cors"><a href="#3-什么是cors" class="headerlink" title="3,什么是cors"></a>3,什么是cors</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651364.jpg"></p><h5 id="4-cors注意事项"><a href="#4-cors注意事项" class="headerlink" title="4 cors注意事项"></a>4 cors注意事项</h5><p> <img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651346.jpg"></p><h5 id="5-cors响应头部"><a href="#5-cors响应头部" class="headerlink" title="5,cors响应头部"></a>5,cors响应头部</h5><p>- </p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651365.jpg"></p><p>- </p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651366.jpg"></p><p>- </p><h5 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651367.jpg"></h5><h5 id="6-cors请求的分类"><a href="#6-cors请求的分类" class="headerlink" title="6,cors请求的分类"></a>6,cors请求的分类</h5><ul><li>客户端请求cors接口时候。根据请求方式和请求头的不同。可以cors请求分为两大类<ul><li>简单请求</li><li>预检请求</li></ul></li></ul><h5 id="7，简单请求"><a href="#7，简单请求" class="headerlink" title="7，简单请求"></a>7，简单请求</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651368.jpg"></p><h5 id="8-预检请求"><a href="#8-预检请求" class="headerlink" title="8.预检请求"></a>8.预检请求</h5><ul><li>刚好与简单请求相反</li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651369.jpg"></p><h5 id="9-他们两的区别"><a href="#9-他们两的区别" class="headerlink" title="9,他们两的区别"></a>9,他们两的区别</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651370.jpg"></p><h4 id="6-JSONP接口"><a href="#6-JSONP接口" class="headerlink" title="6,JSONP接口"></a>6,JSONP接口</h4><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651371.jpg"></p><h5 id="1-创建JSONP接口的注意事项"><a href="#1-创建JSONP接口的注意事项" class="headerlink" title="1.创建JSONP接口的注意事项"></a>1.创建JSONP接口的注意事项</h5><ul><li>如果项目中已经配置了cors跨域资源共享。为了防止冲突。必须在配置cors中间件之前声明JSONP接口。否则JSONP接口，会被处理成开启cors接口</li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651372.jpg"></p><h5 id="2-实现具体代码"><a href="#2-实现具体代码" class="headerlink" title="2,实现具体代码"></a>2,实现具体代码</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161651947.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;node-js&quot;&gt;&lt;a href=&quot;#node-js&quot; class=&quot;headerlink&quot; title=&quot;node.js&quot;&gt;&lt;/a&gt;node.js&lt;/h1&gt;&lt;h2 id=&quot;一，node-js和内置模块&quot;&gt;&lt;a href=&quot;#一，node-js和内置模块&quot; cla</summary>
      
    
    
    
    <category term="后端" scheme="http://example.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="nodejs" scheme="http://example.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>axios入门到源码分析</title>
    <link href="http://example.com/2022/10/03/axios%E5%85%A5%E9%97%A8%E5%88%B0%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2022/10/03/axios%E5%85%A5%E9%97%A8%E5%88%B0%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</id>
    <published>2022-10-03T14:04:34.000Z</published>
    <updated>2023-02-16T09:08:49.720Z</updated>
    
    <content type="html"><![CDATA[<h1 id="axios入门到源码分析"><a href="#axios入门到源码分析" class="headerlink" title="axios入门到源码分析"></a>axios入门到源码分析</h1><p><strong>Axios 是一个基于 promise 的网络请求库，可以用于浏览器和 node.js</strong></p><h3 id="json-server服务的构建"><a href="#json-server服务的构建" class="headerlink" title="json - server服务的构建"></a>json - server服务的构建</h3><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161648668.jpg"></p><h2 id="一-axios基本原理"><a href="#一-axios基本原理" class="headerlink" title="一,axios基本原理"></a>一,axios基本原理</h2><h3 id="1，axios介绍与配置"><a href="#1，axios介绍与配置" class="headerlink" title="1，axios介绍与配置"></a>1，axios介绍与配置</h3><h4 id="axios功能；"><a href="#axios功能；" class="headerlink" title="axios功能；"></a>axios功能；</h4><ul><li>发送ajax请求</li><li>在node.js中发送http请求</li><li>promise的相关操作</li><li>可以，拦截响应和请求的一些数据，对结果做一个预处理</li><li>对响应和请求的结果做一个转换</li><li>取消请求</li><li>自动将结果转换为JSON数据</li><li>可以阻挡跨站攻击</li></ul><h4 id="axios配置"><a href="#axios配置" class="headerlink" title="axios配置"></a>axios配置</h4><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161648425.jpg"></p><h3 id="2-axios基本使用"><a href="#2-axios基本使用" class="headerlink" title="2,axios基本使用"></a>2,axios基本使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取按钮</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 第一个按钮</span></span></span><br><span class="line"><span class="language-javascript">        btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 发送ajax请求</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// URL</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts/1&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">respone</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(respone)</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 第二个按钮</span></span></span><br><span class="line"><span class="language-javascript">        btns[<span class="number">1</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 发送ajax请求</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 添加内容使用POST请求</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// URL</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&#x27; http://localhost:3000/posts&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 设置请求体</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">title</span>: <span class="string">&quot;今天依旧风和日丽&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">author</span>: <span class="string">&quot;leg&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 第三按钮</span></span></span><br><span class="line"><span class="language-javascript">        btns[<span class="number">2</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 发送ajax请求</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 修改，推送内容使用PUT请求</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">method</span>: <span class="string">&#x27;PUT&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// URL</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts/1&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 设置请求体</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">title</span>: <span class="string">&quot;今天依旧风和日丽&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">author</span>: <span class="string">&quot;李四&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 第四按钮</span></span></span><br><span class="line"><span class="language-javascript">        btns[<span class="number">3</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 发送ajax请求</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 修改，推送内容使用PUT请求</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">method</span>: <span class="string">&#x27;DELETE&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// URL</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts/1&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-axios其他发送方法"><a href="#3-axios其他发送方法" class="headerlink" title="3,axios其他发送方法"></a>3,axios其他发送方法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取按钮</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 第一个按钮,发送get请求</span></span></span><br><span class="line"><span class="language-javascript">        btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 发送ajax请求</span></span></span><br><span class="line"><span class="language-javascript">            axios.<span class="title function_">request</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&quot;http://localhost:3000/comments&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 第二个按钮，发送post请求 （第二种方式）</span></span></span><br><span class="line"><span class="language-javascript">        btns[<span class="number">1</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            axios.<span class="title function_">post</span>(<span class="string">&#x27;http://localhost:3000/comments&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;body&quot;</span>: <span class="string">&quot;这文章写的也太好了&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;postId&quot;</span>: <span class="number">2</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>综上所述，我们不仅可以使用axios函数发送请求，也可以使用axios上面的方法发送ajax请求</strong></p></li><li><p><strong>config</strong>：<strong>是配置对象</strong>，里面包括url，method。请求体等等这些属性-</p></li><li><p><strong>data</strong>：响应体内容（服务器返回给客户端内容）,通过JSON解析，将内容响应为一个对象，响应给客户端</p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161648443.jpg"></p></li></ul><p><img src="E:\前端笔记\前端笔记作业\js图片\骑牛.jpg"></p><h3 id="4-配置对象详细说明"><a href="#4-配置对象详细说明" class="headerlink" title="4,配置对象详细说明"></a>4,配置对象详细说明</h3><ul><li><p>高频常用参数罗列</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1,url  通过设置url参数，决定请求发给谁</span><br><span class="line">2，method：设置请求类型 post，get，delete，put</span><br><span class="line">3,baseURL ：设置url基础结构，发送请求配置时，只需要设置url就好，axios会将这两个url自动拼接一起</span><br><span class="line">4，headers:头信息，主要用于身份校验，要求在头信息中加入一个特殊的   标识  // 来检验请求是否满足要求，可以借助headers对请求头信息做一个配置</span><br><span class="line">5，params: 用于设定url参数，可以通过params直接添加url参数名和参数值</span><br><span class="line">6，data:设置响应体</span><br><span class="line">7，timeout：超时请求时间，单位：ms.超过请求时间。请求自动取消</span><br></pre></td></tr></table></figure></li><li><p>设置默认配置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 设置默认配置</span><br><span class="line">axios.defaults.method=&#x27;GET&#x27;; //设置默认的请求类型是 GET</span><br><span class="line">axios.defaults.baseURL=&#x27;http://localhost:3000&#x27;; //设置基础URL</span><br><span class="line">axios.defaults.params=&#123;id:100&#125;;</span><br><span class="line">axios.defaults.timeout=3000;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>剩下的可以看axios中文文档</p><p><a href="https://www.axios-http.cn/docs/req_config">https://www.axios-http.cn/docs/req_config</a></p></li></ul><h3 id="5，axios默认配置"><a href="#5，axios默认配置" class="headerlink" title="5，axios默认配置"></a>5，axios默认配置</h3><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161648008.jpg"></p><ul><li>后续不需要在写重复的部分</li></ul><h3 id="6，axios创建实例对象发送请求"><a href="#6，axios创建实例对象发送请求" class="headerlink" title="6，axios创建实例对象发送请求"></a>6，axios创建实例对象发送请求</h3><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161648972.jpg"></h3><h3 id="7-axios拦截器（重点）"><a href="#7-axios拦截器（重点）" class="headerlink" title="7,axios拦截器（重点）"></a>7,axios拦截器（重点）</h3><ul><li>相当于关卡。</li><li><strong>请求拦截器</strong>，对请求数据做处理，，如果满足数据，就放行</li><li><strong>响应拦截器</strong>，对请求数据做处理，，如果满足数据，就放行，并且将数据交给用户做处理。</li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161648456.jpg"></p><ul><li>请求拦截器，后进先执行，</li><li>响应拦截器，先进先执行（具体原理，在源码里讲）</li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161649848.jpg"></p><h3 id="8-axios取消请求"><a href="#8-axios取消请求" class="headerlink" title="8,axios取消请求"></a>8,axios取消请求</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取按钮</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明全局变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> cancel = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 发送请求</span></span></span><br><span class="line"><span class="language-javascript">    btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 检查上一次请求是否已经完成,如果在继续我们就取消上一次请求</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (cancel !== <span class="literal">null</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">cancel</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 添加请求配置对象属性</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">cancelToken</span>: <span class="keyword">new</span> axios.<span class="title class_">CancelToken</span>(<span class="keyword">function</span> <span class="title function_">executor</span>(<span class="params">c</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                cancel = c;</span></span><br><span class="line"><span class="language-javascript">                cancel = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 绑定第二个事件，取消请求</span></span></span><br><span class="line"><span class="language-javascript">    btns[<span class="number">1</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">cancel</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二，axios源码分析"><a href="#二，axios源码分析" class="headerlink" title="二，axios源码分析"></a>二，axios源码分析</h2><h3 id="1，axios对象创建模拟实现"><a href="#1，axios对象创建模拟实现" class="headerlink" title="1，axios对象创建模拟实现"></a>1，axios对象创建模拟实现</h3><p><strong>bind()</strong> ：bind 方法用于将函数体内的 this 绑定到某个对象，然后返回一个新的函数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var square = &#123;</span><br><span class="line">    num1: 0,</span><br><span class="line">    tool: function () &#123;</span><br><span class="line">      console.log(this.num1*this.num1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">var getSquare = &#123;num1:5&#125;;</span><br><span class="line">var func = square.tool.bind(getSquare);</span><br><span class="line">func();//25</span><br><span class="line">square.tool();//0</span><br></pre></td></tr></table></figure><ul><li>将square对象上面this指向getSquare这个对象上面，<strong>然后返回一个新的函数</strong></li></ul><p><strong>Object.keys()</strong> 方法会返回一个由一个给定对象的自身可枚举属性组成的数组</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const object1 = &#123;</span><br><span class="line">  a: &#x27;somestring&#x27;,</span><br><span class="line">  b: 42,</span><br><span class="line">  c: false</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log(Object.keys(object1));</span><br><span class="line">// expected output: Array [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>【后续敬请期待….】</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;axios入门到源码分析&quot;&gt;&lt;a href=&quot;#axios入门到源码分析&quot; class=&quot;headerlink&quot; title=&quot;axios入门到源码分析&quot;&gt;&lt;/a&gt;axios入门到源码分析&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Axios 是一个基于 promise 的网</summary>
      
    
    
    
    <category term="网路请求" scheme="http://example.com/categories/%E7%BD%91%E8%B7%AF%E8%AF%B7%E6%B1%82/"/>
    
    
    <category term="axios" scheme="http://example.com/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>promise入门到进阶</title>
    <link href="http://example.com/2022/09/30/promise%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2022/09/30/promise%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</id>
    <published>2022-09-30T11:09:23.000Z</published>
    <updated>2023-02-16T09:07:32.916Z</updated>
    
    <content type="html"><![CDATA[<h1 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h1><h2 id="一，promise理解使用"><a href="#一，promise理解使用" class="headerlink" title="一，promise理解使用"></a>一，promise理解使用</h2><h3 id="1，promise是什么？"><a href="#1，promise是什么？" class="headerlink" title="1，promise是什么？"></a>1，promise是什么？</h3><ul><li>抽象表达<ul><li>promise是一个门新技术（es6规范）</li><li>promise是js进行异步编程的<strong>新解决方案</strong>（旧方案使用回调函数）</li></ul></li><li>具体表达<ul><li>语法上：是一个构造函数</li><li>功能上：用来封装一个异步操作并可以获取成功&#x2F;失败的结果</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703144.jpg"></p><h3 id="2-为什么使用promise"><a href="#2-为什么使用promise" class="headerlink" title="2,为什么使用promise"></a>2,为什么使用promise</h3><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703145.jpg"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1，promise初体验"><a href="#1，promise初体验" class="headerlink" title="1，promise初体验"></a>1，promise初体验</h4><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703146.jpg"></p><ul><li>then()方法处理成功和失败的结果</li></ul><h3 id="3，promise实践练习"><a href="#3，promise实践练习" class="headerlink" title="3，promise实践练习"></a>3，promise实践练习</h3><h4 id="1，fs读取文件"><a href="#1，fs读取文件" class="headerlink" title="1，fs读取文件"></a>1，fs读取文件</h4><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703147.jpg"></p><ul><li><p>fs是filesystem的缩写，该模块提供本地文件的读写能力，基本上是POSIX文件操作命令的简单包装。</p><p>fs模块的功能非常丰富. 并且，这个模块几乎对所有操作提供<strong>异步</strong>和<strong>同步</strong>两种操作方式，供开发者选择。</p></li></ul><h4 id="2-ajax请求"><a href="#2-ajax请求" class="headerlink" title="2.ajax请求"></a>2.ajax请求</h4><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703148.jpg"></p><h3 id="4-promise封装练习"><a href="#4-promise封装练习" class="headerlink" title="4.promise封装练习"></a>4.promise封装练习</h3><h4 id="1-promise封装fs读取文件操作"><a href="#1-promise封装fs读取文件操作" class="headerlink" title="1,promise封装fs读取文件操作"></a>1,promise封装fs读取文件操作</h4><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703149.jpg"></p><h4 id="3，util-promiseify-方法进行promise风格转换"><a href="#3，util-promiseify-方法进行promise风格转换" class="headerlink" title="3，util.promiseify 方法进行promise风格转换"></a>3，util.promiseify 方法进行promise风格转换</h4><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703150.jpg"></p><h4 id="4-promise封装ajax请求"><a href="#4-promise封装ajax请求" class="headerlink" title="4,promise封装ajax请求"></a>4,promise封装ajax请求</h4><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703151.jpg"></p><h3 id="5-promise的状态改变"><a href="#5-promise的状态改变" class="headerlink" title="5,promise的状态改变"></a>5,promise的状态改变</h3><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703152.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703153.jpg"></p><h3 id="6，promise对象结果值属性介绍"><a href="#6，promise对象结果值属性介绍" class="headerlink" title="6，promise对象结果值属性介绍"></a>6，promise对象结果值属性介绍</h3><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703154.jpg"></p><h3 id="7-promise工作流程"><a href="#7-promise工作流程" class="headerlink" title="7,promise工作流程"></a>7,promise工作流程</h3><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703155.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703156.jpg"></p><h3 id="8，如何使用promise"><a href="#8，如何使用promise" class="headerlink" title="8，如何使用promise"></a>8，如何使用promise</h3><h4 id="1，promise-API"><a href="#1，promise-API" class="headerlink" title="1，promise API"></a>1，promise API</h4><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703157.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703158.jpg"></p><h5 id="1-promise-reslove方法"><a href="#1-promise-reslove方法" class="headerlink" title="1,promise.reslove方法"></a>1,promise.reslove方法</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703159.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703160.jpg"></p><h5 id="2-promise-reject方法"><a href="#2-promise-reject方法" class="headerlink" title="2,promise.reject方法"></a>2,promise.reject方法</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703161.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703162.jpg"></p><h5 id="3-promise-all方法和promise-race方法"><a href="#3-promise-all方法和promise-race方法" class="headerlink" title="3,promise.all方法和promise.race方法"></a>3,promise.all方法和promise.race方法</h5><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703163.jpg"></p><ul><li><strong>promise.all方法</strong></li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703164.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703165.jpg"></p><ul><li><p><strong>promise.race方法</strong></p><ul><li>看谁先是那种状态，最后结果就是那种状态</li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703166.jpg"></p></li></ul><h3 id="9-promise关键问题"><a href="#9-promise关键问题" class="headerlink" title="9.promise关键问题"></a>9.promise关键问题</h3><h4 id="1，如何修改对象的状态"><a href="#1，如何修改对象的状态" class="headerlink" title="1，如何修改对象的状态"></a>1，如何修改对象的状态</h4><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703167.jpg"></p><ul><li>&#96;&#96;&#96;html<br>throw: 返回失败的结果<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 2，promise指定多个成功/失败的回调函数，都会调用吗？</span><br><span class="line"></span><br><span class="line">- yes</span><br><span class="line"></span><br><span class="line">  ![](https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703168.jpg)</span><br><span class="line"></span><br><span class="line">#### 3,改变promise状态和指定回调函数谁先谁后</span><br><span class="line"></span><br><span class="line">- 补充：几种常见异步程序</span><br><span class="line"></span><br><span class="line">  ```html</span><br><span class="line">  - fs文件操作</span><br><span class="line">  - 数据库操作</span><br><span class="line">  - ajax</span><br><span class="line">  -定时器</span><br></pre></td></tr></table></figure></li></ul><p>(1) 都有可能, 正常情况下是先指定<a href="https://so.csdn.net/so/search?q=%E5%9B%9E%E8%B0%83&spm=1001.2101.3001.7020">回调</a>再改变状态, 但也可以先改状态再指定回调<br>(2) 如何先改状态再指定回调?</p><ul><li><p><strong>1 在执行器中直接调用 resolve()&#x2F;reject();此时为同步执行。</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//先改状态, 后指定回调函数</span><br><span class="line">new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  resolve(1) // 先改变的状态(同时指定数据)</span><br><span class="line">&#125;).then(// 后指定回调函数, 异步执行回调函数</span><br><span class="line">  value =&gt; &#123;console.log(&#x27;value2&#x27;, value)&#125;,</span><br><span class="line">  reason =&gt; &#123;console.log(&#x27;reason2&#x27;, reason)&#125;</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>2 延迟更长时间才调用 then();此时为异步执行。</strong></p></li></ul>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 常规: 先指定回调函数, 后改变的状态</span><br><span class="line">new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    resolve(1) // 后改变的状态(同时指定数据), 异步执行回调函数</span><br><span class="line">  &#125;, 1000);</span><br><span class="line">&#125;).then(// 先指定回调函数, 保存当前指定的回调函数</span><br><span class="line">  value =&gt; &#123;&#125;,</span><br><span class="line">  reason =&gt; &#123;console.log(&#x27;reason&#x27;, reason)&#125;</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(3) 什么时候才能得到数据?（即什么时候调用 then（））</p><ul><li><p><strong>如果先指定的回调, 那当状态发生改变时, 回调函数就会调用, 得到数据</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 常规: 先指定回调函数, 后改变的状态</span><br><span class="line">new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    resolve(1) // 后改变的状态(同时指定数据), 异步执行回调函数</span><br><span class="line">  &#125;, 1000);</span><br><span class="line">&#125;).then(// 先指定回调函数, 保存当前指定的回调函数</span><br><span class="line">  value =&gt; &#123;&#125;,</span><br><span class="line">  reason =&gt; &#123;console.log(&#x27;reason&#x27;, reason)&#125;</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>如果先改变的状态, 那当指定回调时, 回调函数就会调用, 得到数据</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 如何先改状态, 后指定回调函数</span><br><span class="line">new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  resolve(1) // 先改变的状态(同时指定数据)</span><br><span class="line">&#125;).then(// 后指定回调函数, 异步执行回调函数</span><br><span class="line">  value =&gt; &#123;console.log(&#x27;value2&#x27;, value)&#125;,</span><br><span class="line">  reason =&gt; &#123;console.log(&#x27;reason2&#x27;, reason)&#125;</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>【总结】：</p><ul><li>异步任务：先指定回调——&gt;在改变状态——&gt;在执行</li><li>同步任务：先改变状态——&gt;在指定回调——&gt;在执行</li></ul></li></ul><h4 id="4，then方法返回结果由谁决定呢？"><a href="#4，then方法返回结果由谁决定呢？" class="headerlink" title="4，then方法返回结果由谁决定呢？"></a>4，then方法返回结果由谁决定呢？</h4><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703169.jpg"></p><h4 id="5-promise如何串联多个任务操作"><a href="#5-promise如何串联多个任务操作" class="headerlink" title="5,promise如何串联多个任务操作"></a>5,promise如何串联多个任务操作</h4><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703170.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703171.jpg"></p><h4 id="6-promise异常传透？"><a href="#6-promise异常传透？" class="headerlink" title="6,promise异常传透？"></a>6,promise异常传透？</h4><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703172.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703173.jpg"></p><h4 id="7-中断promise链"><a href="#7-中断promise链" class="headerlink" title="7,中断promise链"></a>7,中断promise链</h4><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703174.jpg"></p><h3 id="10，promise链式操作用法"><a href="#10，promise链式操作用法" class="headerlink" title="10，promise链式操作用法"></a>10，promise链式操作用法</h3><ul><li><p>所以，从表面上看，Promise只是能够简化层层回调的写法，而实质上，Promise的精髓是“状态”，用维护状态、传递状态的方式来使得回调函数能够及时调用，它比传递callback函数要简单、灵活的多。所以使用Promise的正确场景是这样的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">function runAsync1()&#123;</span><br><span class="line">    var p = new Promise(function(resolve, reject)&#123;</span><br><span class="line">        //做一些异步操作</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">            console.log(&#x27;异步任务1执行完成&#x27;);</span><br><span class="line">            resolve(&#x27;随便什么数据1&#x27;);</span><br><span class="line">        &#125;, 1000);</span><br><span class="line">    &#125;);</span><br><span class="line">    return p;            </span><br><span class="line">&#125;</span><br><span class="line">function runAsync2()&#123;</span><br><span class="line">    var p = new Promise(function(resolve, reject)&#123;</span><br><span class="line">        //做一些异步操作</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">            console.log(&#x27;异步任务2执行完成&#x27;);</span><br><span class="line">            resolve(&#x27;随便什么数据2&#x27;);</span><br><span class="line">        &#125;, 2000);</span><br><span class="line">    &#125;);</span><br><span class="line">    return p;            </span><br><span class="line">&#125;</span><br><span class="line">function runAsync3()&#123;</span><br><span class="line">    var p = new Promise(function(resolve, reject)&#123;</span><br><span class="line">        //做一些异步操作</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">            console.log(&#x27;异步任务3执行完成&#x27;);</span><br><span class="line">            resolve(&#x27;随便什么数据3&#x27;);</span><br><span class="line">        &#125;, 2000);</span><br><span class="line">    &#125;);</span><br><span class="line">    return p;            </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在then方法中，你也可以直接return数据而不是Promise对象，在后面的then中就可以接收到数据了，比如我们把上面的代码修改成这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">runAsync1()</span><br><span class="line">.then(function(data)&#123;</span><br><span class="line">    console.log(data);</span><br><span class="line">    return runAsync2();</span><br><span class="line">&#125;)</span><br><span class="line">.then(function(data)&#123;</span><br><span class="line">    console.log(data);</span><br><span class="line">    return &#x27;直接返回数据&#x27;;  //这里直接返回数据</span><br><span class="line">&#125;)</span><br><span class="line">.then(function(data)&#123;</span><br><span class="line">    console.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="二-自定义（手写）promise"><a href="#二-自定义（手写）promise" class="headerlink" title="二,自定义（手写）promise"></a>二,自定义（手写）promise</h2><p>####1，定义整体结构搭建</p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703175.jpg"></p><h4 id="2-reslove-与reject解构搭建"><a href="#2-reslove-与reject解构搭建" class="headerlink" title="2,reslove 与reject解构搭建"></a>2,reslove 与reject解构搭建</h4><h5 id="1、执行器函数"><a href="#1、执行器函数" class="headerlink" title="1、执行器函数"></a>1、执行器函数</h5><p>我们将<strong>promise构造器函数</strong>中传递的函数参数称为<strong>执行器</strong>。<strong>执行器函数是同步调用的，不会进入到异步函数栈。</strong>异步操作在执行栈中执行。</p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703176.jpg"></p><h4 id="3-reslove-和reject-代码实现"><a href="#3-reslove-和reject-代码实现" class="headerlink" title="3,reslove 和reject 代码实现"></a>3,reslove 和reject 代码实现</h4><ul><li><strong>构造函数</strong>：构造函数不能被直接调用，必须通过new<a href="https://baike.baidu.com/item/%E8%BF%90%E7%AE%97%E7%AC%A6?fromModule=lemma_inlink">运算符</a>在创建对象时才会自动调用。</li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703177.jpg"></p><h4 id="4，通过throw抛出异常，来改变promise状态"><a href="#4，通过throw抛出异常，来改变promise状态" class="headerlink" title="4，通过throw抛出异常，来改变promise状态"></a>4，通过throw抛出异常，来改变promise状态</h4><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703178.jpg"></p><h4 id="5-promise状态只能修改一次"><a href="#5-promise状态只能修改一次" class="headerlink" title="5,promise状态只能修改一次"></a>5,promise状态只能修改一次</h4><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703179.jpg"></p><ul><li><p>思路就是：添加判断状态</p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703180.jpg"></p></li><li><p><strong>return</strong> <strong>语句</strong>终止函数的执行，并返回一个指定的值给函数调用者。</p></li></ul><h4 id="6-then方法当中执行回调"><a href="#6-then方法当中执行回调" class="headerlink" title="6,then方法当中执行回调"></a>6,then方法当中执行回调</h4><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703181.jpg"></p><h4 id="7-异步任务回调的执行"><a href="#7-异步任务回调的执行" class="headerlink" title="7,异步任务回调的执行"></a>7,异步任务回调的执行</h4><ul><li><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703182.jpg"></p><p>【如果没有pending，那么then方法判断成功和失败的程序进不去的，】</p></li><li><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703183.jpg"></p></li><li><p>建议直接看代码，会容易理解</p></li></ul><h4 id="7，指定多个回调的实现"><a href="#7，指定多个回调的实现" class="headerlink" title="7，指定多个回调的实现"></a>7，指定多个回调的实现</h4><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703184.jpg"></p><ul><li><p><strong>forEach()</strong> 方法对数组的每个元素执行一次给定的函数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Array.protype.forEach()</span><br></pre></td></tr></table></figure></li><li><p><strong>push()<strong>将一个或多个元素添加到订单中，并返回该方法的新长度。</strong>(推)</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Array.protype.push()</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703185.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703186.jpg"></p><h4 id="8-同步任务下，then方法返回结果的实现"><a href="#8-同步任务下，then方法返回结果的实现" class="headerlink" title="8,同步任务下，then方法返回结果的实现"></a>8,同步任务下，then方法返回结果的实现</h4><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703187.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703188.jpg"></p><ul><li><p>这里then方法是异步的。而res是同步的。所以结果是  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">先执行res.在执行then。</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703189.jpg"></p></li></ul><h4 id="9，异步修改then方法结果返回、（重点）"><a href="#9，异步修改then方法结果返回、（重点）" class="headerlink" title="9，异步修改then方法结果返回、（重点）"></a>9，异步修改then方法结果返回、（重点）</h4><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703190.jpg"></p><h4 id="10-then方法完善与优化"><a href="#10-then方法完善与优化" class="headerlink" title="10,then方法完善与优化"></a>10,then方法完善与优化</h4><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703191.jpg"></p><p><strong>【纠错】：promise状态是由onResloved或者onRejected两回调函数返回的结果来决定；</strong></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703192.jpg"></p><p>【补充】</p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703193.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703194.jpg"></p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703196.jpg"></p><p>【最后】</p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703197.jpg"></p><ul><li>&#96;&#96;&#96;html<br>使用trycatch就好<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 11，catch方法，异常穿透与值传递</span><br><span class="line"></span><br><span class="line">#####  一，异常穿透</span><br><span class="line"></span><br><span class="line">**1,**</span><br><span class="line"></span><br><span class="line">![](https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703198.jpg)</span><br><span class="line"></span><br><span class="line">**2,**</span><br><span class="line"></span><br><span class="line">![](https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703199.jpg)</span><br><span class="line"></span><br><span class="line">- 报错到catch，然后catch处理上面的报错，</span><br><span class="line">- 可见问题原因是因为，then方法中没有传递第二个回调函数。（这样undefined过不去，就会报错）</span><br><span class="line"></span><br><span class="line">**3,**</span><br><span class="line"></span><br><span class="line">![](https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703200.jpg)</span><br><span class="line"></span><br><span class="line">4,</span><br><span class="line"></span><br><span class="line">![](https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703201.jpg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##### 二 .值传递</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">![](https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703202.jpg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 12.resolve方法封装</span><br><span class="line"></span><br><span class="line">![](https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703203.jpg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 13,reject方法封装</span><br><span class="line"></span><br><span class="line">   ![](https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703204.jpg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 14,all方法封装(重点)</span><br><span class="line"></span><br><span class="line">- 全成功，就成功的promise对象（所以成功的值）</span><br><span class="line">- 有一个失败，就返回失败的promise对象，并且返回失败的结果值</span><br><span class="line"></span><br><span class="line">![](https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703205.jpg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 15，race方法封装</span><br><span class="line"></span><br><span class="line">- 由数组中最先改变状态的那个决定</span><br><span class="line"></span><br><span class="line"> ![](https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703206.jpg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 16,then方法回调的异步执行</span><br><span class="line"></span><br><span class="line">- 指的是then方法中的异步执行（**then方法本来是异步执行**）</span><br><span class="line"></span><br><span class="line">![](https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703207.jpg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 重点：我们给调用回调函数的位置放一个定时器（不用添加时间）</span><br><span class="line"></span><br><span class="line">- 【执行过程】</span><br><span class="line"></span><br><span class="line">  ![](https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703208.jpg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 三，async 与await</span><br><span class="line"></span><br><span class="line">#### 1,async</span><br><span class="line"></span><br><span class="line">- 返回值是一个promise对象，与then方法返回的结果是一样的</span><br><span class="line">- `async` 和 `await` 关键字让我们可以用一种更简洁的方式写出基于 [`Promise`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise) 的异步行为，而无需刻意地链式调用 `promise`。</span><br><span class="line"></span><br><span class="line">![](https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703209.jpg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 2 await表达式</span><br><span class="line"></span><br><span class="line">- 必须要在async函数内部使用，它是一个基于async函数的表达式</span><br><span class="line">- `await` 操作符用于等待一个[`Promise`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise) 对象。它只能在异步函数 [`async function`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function) 中使用。</span><br><span class="line"></span><br><span class="line">![](https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703210.jpg)</span><br><span class="line"></span><br><span class="line">- **`try...catch`**语句标记要尝试的语句块，并指定一个出现异常时抛出的响应。</span><br><span class="line"></span><br><span class="line">  ```html</span><br><span class="line"></span><br><span class="line">  catch子句包含try块中抛出异常时要执行的语句</span><br><span class="line">  ，如果try语句中没有出错，那就直接跳过catch语句</span><br></pre></td></tr></table></figure></li></ul><h4 id="3，async和await结合练习"><a href="#3，async和await结合练习" class="headerlink" title="3，async和await结合练习"></a>3，async和await结合练习</h4><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/202302161703211.jpg"></p><h3 id="四，手写promise"><a href="#四，手写promise" class="headerlink" title="四，手写promise"></a>四，手写promise</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Promise</span>(<span class="params">executor</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseState</span> = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">PromiseResult</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 声明属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callback</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="comment">// 函数</span></span><br><span class="line">    <span class="comment">// reslove函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断状态,符合条件，下面代码停止执行</span></span><br><span class="line">        <span class="keyword">if</span> (self.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 1,修改对象的状态，PromiseState</span></span><br><span class="line">        self.<span class="property">PromiseState</span> = <span class="string">&#x27;fulfilled&#x27;</span>;</span><br><span class="line">        <span class="comment">// 2,设置对象的结果值</span></span><br><span class="line">        self.<span class="property">PromiseResult</span> = data;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// // 调用成功的回到函数</span></span><br><span class="line">        <span class="comment">// if (self.callback.onResloved) &#123;</span></span><br><span class="line">        <span class="comment">//     self.callback.onResloved(data);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// 调用成功的回到函数,可能会有多个成功的回调，需要遍历</span></span><br><span class="line">        self.<span class="property">callback</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            item.<span class="title function_">onResloved</span>(data);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// reject函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断状态,符合条件，下面代码停止执行</span></span><br><span class="line">        <span class="keyword">if</span> (self.<span class="property">PromiseState</span> !== <span class="string">&#x27;pending&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 1,修改对象的状态，PromiseState</span></span><br><span class="line">        self.<span class="property">PromiseState</span> = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line">        <span class="comment">// 2,设置对象的结果值</span></span><br><span class="line">        self.<span class="property">PromiseResult</span> = data;</span><br><span class="line">        <span class="comment">// // 调用失败的回到函数</span></span><br><span class="line">        <span class="comment">// if (self.callback.onRejected) &#123;</span></span><br><span class="line">        <span class="comment">//     self.callback.onRejected(data);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// 调用成功的回到函数,可能会有多个成功的回调，需要遍历</span></span><br><span class="line">        self.<span class="property">callback</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            item.<span class="title function_">onRejected</span>(data);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 同步调用【执行器函数】</span></span><br><span class="line">        <span class="title function_">executor</span>(resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="comment">// 修改promise对象为失败</span></span><br><span class="line">        <span class="title function_">reject</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 添加then方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">onResloved, onRejected</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="comment">// 判断回调函数参数为</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> onRejected !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        onRejected = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> reason</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> onResloved !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        onResloved = <span class="function"><span class="params">value</span> =&gt;</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回一个promise对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 封装函数</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">type</span>) &#123;</span><br><span class="line">            <span class="comment">// 获取回调函数的执行结果,如果这里是this，因为在普通函数里this指向window。</span></span><br><span class="line">            <span class="comment">// 所以需要改变this指向</span></span><br><span class="line">            <span class="keyword">let</span> result = <span class="title function_">type</span>(self.<span class="property">PromiseResult</span>);</span><br><span class="line">            <span class="comment">// 判断</span></span><br><span class="line">            <span class="keyword">if</span> (result <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果是promise类型的对象</span></span><br><span class="line">                result.<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123; <span class="title function_">resolve</span>(v); &#125;,</span><br><span class="line">                    <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="title function_">reject</span>(r);</span><br><span class="line">                    &#125;</span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 结果对象状态为【成功】</span></span><br><span class="line">                <span class="title function_">resolve</span>(result);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调用回调函数promiseState</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">            <span class="title function_">callback</span>(onResloved);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;reject&#x27;</span>) &#123;</span><br><span class="line">            <span class="title function_">callback</span>(onRejected);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1，判断pending状态</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">PromiseState</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//保存回调</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">callback</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">                <span class="attr">onResloved</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="comment">// 执行成功对的回调</span></span><br><span class="line">                    <span class="keyword">let</span> result = <span class="title function_">onResloved</span>(self.<span class="property">PromiseResult</span>);</span><br><span class="line">                    <span class="comment">// 判断</span></span><br><span class="line">                    <span class="keyword">if</span> (result <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) &#123;</span><br><span class="line">                        result.<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                            <span class="title function_">resolve</span>(v);</span><br><span class="line">                        &#125;, <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">                            <span class="title function_">reject</span>(r)</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="title function_">resolve</span>(result);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">onRejected</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="keyword">let</span> result = <span class="title function_">onRejected</span>(self.<span class="property">PromiseResult</span>);</span><br><span class="line">                    <span class="comment">// 判断</span></span><br><span class="line">                    <span class="keyword">if</span> (result <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) &#123;</span><br><span class="line">                        result.<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                            <span class="title function_">resolve</span>(v);</span><br><span class="line">                        &#125;, <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">                            <span class="title function_">reject</span>(r)</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 如果不是一个promise对象，直接返回失败结果</span></span><br><span class="line">                        <span class="title function_">resolve</span>(result);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 添加catch方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">catch</span> = <span class="keyword">function</span> (<span class="params">onRejected</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">undefined</span>, onRejected);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 添加resolve方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">resolve</span> = <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="comment">// 返回promise对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 判断</span></span><br><span class="line">        <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) &#123;</span><br><span class="line">            value.<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(v);</span><br><span class="line">            &#125;, <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>(r);</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 设置成功的状态</span></span><br><span class="line">            <span class="title function_">resolve</span>(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 添加reject方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">reject</span> = <span class="keyword">function</span> (<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="comment">// 返回promise对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//    如果状态错误，直接输出失败状态的返回结果</span></span><br><span class="line">        <span class="title function_">reject</span>(reason);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// all方法的封装</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">all</span> = <span class="keyword">function</span> (<span class="params">promises</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 声明变量</span></span><br><span class="line">        <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> arr = [];</span><br><span class="line">        <span class="comment">// 遍历每个promise</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            promises[i].<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 得知promise对象的状态都是 成功</span></span><br><span class="line">                count++;<span class="comment">//为了遍历所有成功的结果，所有添加一个计数器</span></span><br><span class="line">                <span class="comment">// 每当promise对象成功，存入数组中</span></span><br><span class="line">                arr[i] = v;</span><br><span class="line">                <span class="comment">// 判断</span></span><br><span class="line">                <span class="keyword">if</span> (count === promises.<span class="property">length</span>) &#123;</span><br><span class="line">                    <span class="comment">// 修改状态</span></span><br><span class="line">                    <span class="title function_">resolve</span>(arr);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;, <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>(r);</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">race</span> = <span class="keyword">function</span> (<span class="params">promises</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            promises[i].<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 状态修改为成功</span></span><br><span class="line">                <span class="title function_">resolve</span>(v);</span><br><span class="line">            &#125;, <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 修改失败的</span></span><br><span class="line">                <span class="title function_">reject</span>(r);</span><br><span class="line"></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;promise&quot;&gt;&lt;a href=&quot;#promise&quot; class=&quot;headerlink&quot; title=&quot;promise&quot;&gt;&lt;/a&gt;promise&lt;/h1&gt;&lt;h2 id=&quot;一，promise理解使用&quot;&gt;&lt;a href=&quot;#一，promise理解使用&quot; class</summary>
      
    
    
    
    <category term="js" scheme="http://example.com/categories/js/"/>
    
    
    <category term="promise" scheme="http://example.com/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法的基本使用</title>
    <link href="http://example.com/2022/07/08/Markdown%E8%AF%AD%E6%B3%95/"/>
    <id>http://example.com/2022/07/08/Markdown%E8%AF%AD%E6%B3%95/</id>
    <published>2022-07-08T03:23:12.000Z</published>
    <updated>2023-02-16T08:47:40.094Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1，创建代码块"><a href="#1，创建代码块" class="headerlink" title="1，创建代码块"></a>1，创建代码块</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代码块:英文状态下```</span><br></pre></td></tr></table></figure><h2 id="2，标题"><a href="#2，标题" class="headerlink" title="2，标题"></a>2，标题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//标题语法</span></span><br><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="3，字体"><a href="#3，字体" class="headerlink" title="3，字体"></a>3，字体</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加粗  (建议右击—&gt;B（加粗）)</span></span><br><span class="line">**字体加粗**</span><br><span class="line"><span class="comment">//代码高亮显示</span></span><br><span class="line">==高亮显示==</span><br><span class="line"><span class="comment">//删除线</span></span><br><span class="line">  ~~被删除的文字~~</span><br><span class="line"><span class="comment">//斜线</span></span><br><span class="line">*斜体内容*</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;加粗<br><strong>字体加粗</strong><br>&#x2F;&#x2F;代码高亮显示<br>&#x3D;&#x3D;高亮显示&#x3D;&#x3D;<br>&#x2F;&#x2F;删除线<br>  <del>被删除的文字</del><br>&#x2F;&#x2F;斜线<br><em>斜体内容</em></p><h2 id="4，引用"><a href="#4，引用" class="headerlink" title="4，引用"></a>4，引用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引用语法</span></span><br><span class="line">&gt;作者</span><br><span class="line">&gt;&gt;作者</span><br><span class="line">&gt;&gt;&gt;作者</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;引用语法</p><blockquote><p>作者</p><blockquote><p>作者</p><blockquote><p>作者</p></blockquote></blockquote></blockquote><h2 id="5，分割线"><a href="#5，分割线" class="headerlink" title="5，分割线"></a>5，分割线</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分割线</span></span><br><span class="line">---（细小）</span><br><span class="line">  ***（宽大）</span><br></pre></td></tr></table></figure><h2 id="x2F-x2F-分割线"><a href="#x2F-x2F-分割线" class="headerlink" title="&#x2F;&#x2F;分割线"></a>&#x2F;&#x2F;分割线</h2><hr><h2 id="6-图片的插入"><a href="#6-图片的插入" class="headerlink" title="6.图片的插入"></a>6.图片的插入</h2><p><strong>快捷键：Ctrl+shift+i</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在线图片/本地图片（网上图片复制链接）</span></span><br><span class="line">![我的图片](/image/me.png)--图片路径</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;在线图片&#x2F;本地图片<br><img src="/image/me.png" alt="我的图片">–图片路径</p><p><img src="/image/me.png" alt="我的图片">–图片路径</p><h2 id="7，超链接"><a href="#7，超链接" class="headerlink" title="7，超链接"></a>7，超链接</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//超链接语法</span></span><br><span class="line">[百度主页](https:<span class="comment">//www.baidu.com/?tn=40020637_5_oem_dg)</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;超链接语法<br><a href="https://www.baidu.com/?tn=40020637_5_oem_dg">百度主页</a></p><h2 id="8，列表语法"><a href="#8，列表语法" class="headerlink" title="8，列表语法"></a>8，列表语法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无序列表</span></span><br><span class="line">- 目录<span class="number">1</span></span><br><span class="line">- 目录<span class="number">2</span></span><br><span class="line">- 目录<span class="number">3</span></span><br><span class="line"><span class="comment">//有序列表</span></span><br><span class="line">数字+ . 名称</span><br><span class="line">例如：</span><br><span class="line"><span class="number">1</span> . 首页</span><br><span class="line"><span class="number">2</span> . 分类</span><br><span class="line"><span class="number">3</span> . 页眉</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;无序列表</p><ul><li>目录1</li><li>目录2</li><li>目录3<br>&#x2F;&#x2F;有序列表<br>数字+ . 名称<br>例如：<br>1 . 首页<br>2 . 分类<br>3 . 页眉</li><li>世界你好</li><li>我很好</li><li>你呢</li></ul><h2 id="9-表格"><a href="#9-表格" class="headerlink" title="9.表格"></a>9.表格</h2><p>鼠标右击——点击插入——表格</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1，创建代码块&quot;&gt;&lt;a href=&quot;#1，创建代码块&quot; class=&quot;headerlink&quot; title=&quot;1，创建代码块&quot;&gt;&lt;/a&gt;1，创建代码块&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    <category term="工具使用" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="Markdown" scheme="http://example.com/tags/Markdown/"/>
    
  </entry>
  
</feed>
