<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>迷失的羊羔</title>
  
  <subtitle>Aaron blog</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-12-31T10:18:17.876Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>恩光</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计算属性</title>
    <link href="http://example.com/2022/12/31/%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/12/31/%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2022-12-31T10:17:09.000Z</published>
    <updated>2022-12-31T10:18:17.876Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算属性的使用"><a href="#计算属性的使用" class="headerlink" title="计算属性的使用"></a>计算属性的使用</h1><ul><li>所谓计算属性：将属性计算加工之后，成为一个属性</li></ul><h4 id="1，计算属性使用"><a href="#1，计算属性使用" class="headerlink" title="1，计算属性使用"></a>1，计算属性使用</h4><ul><li><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">姓 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">v-model</span>=<span class="string">&#x27;firstName&#x27;</span>&gt;</span></span><br><span class="line">名 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">v-model</span>=<span class="string">&#x27;lastName&#x27;</span>&gt;</span></span><br><span class="line">全名 <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>script</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span></span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">firstName</span>:<span class="string">&#x27;张&#x27;</span>，</span><br><span class="line">        <span class="attr">lastName</span>:<span class="string">&#x27;三&#x27;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">       &#125;</span><br><span class="line">        <span class="attr">computed</span>:&#123;</span><br><span class="line">            <span class="attr">fullName</span>:&#123;</span><br><span class="line">                <span class="comment">//当有人读取fullName时，get就会被调用，且返回值作为我们fullName的值       </span></span><br><span class="line">                <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">                   <span class="keyword">return</span> firstName + <span class="string">&#x27;-&#x27;</span> + lastName</span><br><span class="line">                &#125;       </span><br><span class="line">            &#125;           </span><br><span class="line">        &#125;               </span><br><span class="line">                       </span><br><span class="line">    &#125;)</span><br><span class="line"> &lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-其他"><a href="#2-其他" class="headerlink" title="2,其他"></a>2,其他</h4><ul><li>计算属性的底层原理：使用的是object.defineProprety()方法</li><li>get函数什么时候执行<ul><li>第一次获取时会执行</li><li>当依赖的 数据发生变化时候会再次执行</li></ul></li><li>备注<ul><li>计算属性最终会出现在vm身上</li><li>如果计算属性要被修改，那必须写set函数去响应修改。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;计算属性的使用&quot;&gt;&lt;a href=&quot;#计算属性的使用&quot; class=&quot;headerlink&quot; title=&quot;计算属性的使用&quot;&gt;&lt;/a&gt;计算属性的使用&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;所谓计算属性：将属性计算加工之后，成为一个属性&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;1</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数据代理的使用</title>
    <link href="http://example.com/2022/12/31/%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/"/>
    <id>http://example.com/2022/12/31/%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/</id>
    <published>2022-12-31T08:37:09.000Z</published>
    <updated>2022-12-31T08:41:14.620Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h1><h3 id="1，Object-defineProperty"><a href="#1，Object-defineProperty" class="headerlink" title="1，Object.defineProperty()"></a>1，Object.defineProperty()</h3><p>在理解数据代理之前，我们先回顾一下这个方法的使用</p><h4 id="1，定义"><a href="#1，定义" class="headerlink" title="1，定义"></a>1，定义</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</span><br></pre></td></tr></table></figure><h4 id="2，语法"><a href="#2，语法" class="headerlink" title="2，语法"></a>2，语法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Object.defineProperty(obj, prop, descriptor)</span><br><span class="line"></span><br><span class="line">obj：要操作的对象</span><br><span class="line">prop：要操作这个对象上的哪个属性</span><br><span class="line">descriptor:要定义或修改的属性描述符。</span><br></pre></td></tr></table></figure><h4 id="3，基本使用"><a href="#3，基本使用" class="headerlink" title="3，基本使用"></a>3，基本使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="keyword">let</span> parson = &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">            <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">     <span class="comment">//下面是这个方法最基本的四个配置项，不过它还有其他配置项      </span></span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(parson, <span class="string">&#x27;age&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">value</span>: <span class="number">18</span>,</span><br><span class="line">            <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="comment">//控制属性是否可以枚举，默认值是false</span></span><br><span class="line">            <span class="attr">writable</span>:<span class="literal">true</span>,  <span class="comment">//控制属性是否可以被修改，默认值是false</span></span><br><span class="line">            <span class="attr">configurable</span>:<span class="literal">true</span>, <span class="comment">//控制属性是否可以被删除，默认值是false</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//    keys这个方法：将对象中的属性名枚举成一个数组。</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(parson))</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="4，高级使用"><a href="#4，高级使用" class="headerlink" title="4，高级使用"></a>4，高级使用</h4><h5 id="getter使用"><a href="#getter使用" class="headerlink" title="getter使用"></a>getter使用</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="keyword">let</span> number = <span class="number">18</span></span><br><span class="line">        <span class="keyword">let</span> parson = &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">            <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(parson, <span class="string">&#x27;age&#x27;</span>, &#123;</span><br><span class="line">            <span class="comment">// 当有人读取parson里面的 age属性，get函数（getter）就会被调用，且返回值是age的值</span></span><br><span class="line">            <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> number;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(parson)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>【控制台输出】</p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/image-20221231111331515.png" alt="image-20221231111331515"></p><h5 id="setter使用"><a href="#setter使用" class="headerlink" title="setter使用"></a>setter使用</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="keyword">let</span> number = <span class="number">18</span></span><br><span class="line">        <span class="keyword">let</span> parson = &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">            <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(parson, <span class="string">&#x27;age&#x27;</span>, &#123;</span><br><span class="line">            <span class="comment">// 当有人读取parson里面的 age属性，get函数（getter）就会被调用，且返回值是age的值</span></span><br><span class="line">            <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get函数被调用&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> number;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 当有人修改了parson里面的age属性，set函数(setter)就会被调用，且会受到修改的具体值</span></span><br><span class="line">            <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set函数被调用&#x27;</span>)</span><br><span class="line">                number = value</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(parson)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>【控制台输出】<img src="https://raw.githubusercontent.com/enguang0207/images/main/test/image-20221231112159329.png" alt="image-20221231112159329"></p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>综上所述，可见Object.defineProperty（）充当了中介的角色，将两个毫无关系的对象联系在一起，然后利用这个方法，对两对象进行操作。</p><h3 id="2，数据代理"><a href="#2，数据代理" class="headerlink" title="2，数据代理"></a>2，数据代理</h3><ul><li><p>通过一个对象对另一个对象的属性进行操作【读&#x2F;写】</p></li><li><p>一个最简单的数据代理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  </span><br><span class="line">       <span class="keyword">let</span> obj = &#123; <span class="attr">x</span>: <span class="number">100</span> &#125;;</span><br><span class="line">       <span class="keyword">let</span> obj1 = &#123; <span class="attr">y</span>: <span class="number">200</span> &#125;;</span><br><span class="line">       </span><br><span class="line">      <span class="comment">//利用数据代理，可以用obj1操作obj中的x</span></span><br><span class="line">       <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj1, <span class="string">&quot;x&quot;</span>, &#123;</span><br><span class="line">           <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">               <span class="keyword">return</span> obj.<span class="property">x</span>;</span><br><span class="line">           &#125;,</span><br><span class="line">  </span><br><span class="line">           <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span><br><span class="line">               obj.<span class="property">x</span> = value;</span><br><span class="line">  </span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">  </span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(obj1)</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>【控制台输出】</p><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/%E6%8E%A7%E5%88%B61.jpg"></p></li></ul><h3 id="3-vue中的数据代理"><a href="#3-vue中的数据代理" class="headerlink" title="3,vue中的数据代理"></a>3,vue中的数据代理</h3><ul><li>Vue中的数据代理，也就是为了简化代码，让代码写起来更加的方便快捷</li></ul><p><img src="https://raw.githubusercontent.com/enguang0207/images/main/test/%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%861.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据代理&quot;&gt;&lt;a href=&quot;#数据代理&quot; class=&quot;headerlink&quot; title=&quot;数据代理&quot;&gt;&lt;/a&gt;数据代理&lt;/h1&gt;&lt;h3 id=&quot;1，Object-defineProperty&quot;&gt;&lt;a href=&quot;#1，Object-definePropert</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo搭建博客--未生成index.html文件</title>
    <link href="http://example.com/2022/12/21/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2-%E6%9C%AA%E7%94%9F%E6%88%90index-html%E6%96%87%E4%BB%B6/"/>
    <id>http://example.com/2022/12/21/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2-%E6%9C%AA%E7%94%9F%E6%88%90index-html%E6%96%87%E4%BB%B6/</id>
    <published>2022-12-21T13:51:09.000Z</published>
    <updated>2022-12-21T14:16:12.561Z</updated>
    
    <content type="html"><![CDATA[<ul><li><strong>问题</strong></li></ul>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo搭建blog部署到GitHub，然后打开自己的blog，发现出现404，页面丢失。</span><br></pre></td></tr></table></figure><ul><li><p><strong>原因</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">仔细一下GitHub的blog仓库中没有index.html文件，也就是在搭建hexo时候生成的public文件夹中没有index.html文件，所以导致在部署远端时也就不存在index.html文件。</span><br></pre></td></tr></table></figure></li><li><p><strong>解决问题：</strong></p><p>【出现上述原因是因为我们不小心把_posts文件夹给删除掉】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">&quot;我的blog&quot;</span></span><br></pre></td></tr></table></figure><ul><li>执行这个命令，它会自动生成一个_posts文件夹，然后文件夹里面有一个“我的blog”的文章</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  <span class="comment">//清除缓存文件 db.json 和已生成的静态文件 public</span></span><br><span class="line">hexo g   <span class="comment">//生成网站静态文件到默认设置的 public 文件夹</span></span><br><span class="line">hexo d   <span class="comment">//自动生成网站静态文件，并部署到设定的仓库。</span></span><br></pre></td></tr></table></figure><ul><li>依次执行hexo的三连环，将文件部署到远端仓库。【如果一次不成，多执行几次】</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;问题&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
  &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
</feed>
